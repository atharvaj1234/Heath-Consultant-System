// File: backend/database.js
const sqlite3 = require('sqlite3').verbose();

const dbName = 'healthconsultant.db';
let db;

function connectToDatabase() {
  return new Promise((resolve, reject) => {
    db = new sqlite3.Database(dbName, (err) => {
      if (err) {
        console.error("Database connection error:", err.message);
        reject(err);
      } else {
        console.log('Connected to the database.');
        resolve(db);
      }
    });
  });
}

async function initializeDatabase() {
  try {
    await connectToDatabase();
    await createTables();
    await seedConsultants();
    console.log('Database initialized successfully.');
  } catch (error) {
    console.error("Database initialization failed:", error.message);
    throw error;
  }
}

async function createTables() {
  return new Promise((resolve, reject) => {
    db.serialize(() => {
      db.run(`
    CREATE TABLE IF NOT EXISTS users (
      id INTEGER PRIMARY KEY AUTOINCREMENT,
      fullName TEXT NOT NULL,
      email TEXT NOT NULL UNIQUE,
      password TEXT NOT NULL,
      role TEXT,
      phone TEXT NOT NULL,
      profilePicture TEXT DEFAULT NULL, -- Path to the profile picture (optional)
      
      -- User-specific fields
      bloodGroup TEXT DEFAULT NULL,
      medicalHistory TEXT DEFAULT NULL,
      currentPrescriptions TEXT DEFAULT NULL,

      -- Consultant-specific fields
      isConsultant INTEGER DEFAULT 0, -- 1 if consultant, 0 otherwise
      bio TEXT DEFAULT NULL,
      qualification TEXT DEFAULT NULL,
      areasOfExpertise TEXT DEFAULT NULL,
      speciality TEXT DEFAULT NULL,
      availability TEXT DEFAULT NULL,  -- Store as JSON string
      bankAccount TEXT DEFAULT NULL,

      isApproved INTEGER DEFAULT 0 -- 1 if approved, 0 otherwise
    );
      `, (err) => {
        if (err) {
          reject(err);
          return;
        }
      });

      db.run(`
        CREATE TABLE IF NOT EXISTS consultants (
          id INTEGER PRIMARY KEY,
          userId INTEGER,
          specialty TEXT,
          qualifications TEXT,
          availability TEXT,
          imageUrl TEXT,
          FOREIGN KEY (userId) REFERENCES users(id)
        )
      `, (err) => {
        if (err) {
          reject(err);
          return;
        }
      });

      db.run(`
        CREATE TABLE IF NOT EXISTS bookings (
          id INTEGER PRIMARY KEY,
          userId INTEGER,
          consultantId INTEGER,
          date TEXT,
          time TEXT,
          status TEXT,
          FOREIGN KEY (userId) REFERENCES users(id),
          FOREIGN KEY (consultantId) REFERENCES consultants(id)
        )
      `, (err) => {
        if (err) {
          reject(err);
          return;
        }
      });

      db.run(`
        CREATE TABLE IF NOT EXISTS healthrecords (
          id INTEGER PRIMARY KEY,
          userId INTEGER,
          medicalHistory TEXT,
          ongoingTreatments TEXT,
          prescriptions TEXT,
          FOREIGN KEY (userId) REFERENCES users(id)
        )
      `, (err) => {
        if (err) {
          reject(err);
          return;
        }
      });

      db.run(`
        CREATE TABLE IF NOT EXISTS messages (
          id INTEGER PRIMARY KEY,
          userId INTEGER,
          consultantId INTEGER,
          message TEXT,
          timestamp TEXT,
          FOREIGN KEY (userId) REFERENCES users(id),
          FOREIGN KEY (consultantId) REFERENCES consultants(id)
        )
      `, (err) => {
        if (err) {
          reject(err);
          return;
        }
      });

      db.run(`
        CREATE TABLE IF NOT EXISTS payments (
          id INTEGER PRIMARY KEY,
          userId INTEGER,
          amount REAL,
          date TEXT,
          status TEXT,
          FOREIGN KEY (userId) REFERENCES users(id)
        )
      `, (err) => {
        if (err) {
          reject(err);
          return;
        }
      });

      db.run(`
        CREATE TABLE IF NOT EXISTS reviews (
          id INTEGER PRIMARY KEY,
          userId INTEGER,
          consultantId INTEGER,
          rating INTEGER,
          review TEXT,
          FOREIGN KEY (userId) REFERENCES users(id),
          FOREIGN KEY (consultantId) REFERENCES consultants(id)
        )
      `, (err) => {
        if (err) {
          reject(err);
          return;
        }
      });
        db.run(`
        CREATE TABLE IF NOT EXISTS contacts (
          id INTEGER PRIMARY KEY,
          name TEXT,
          email TEXT,
          subject TEXT,
          message TEXT
        )
      `, (err) => {
        if (err) {
          reject(err);
          return;
        }
      });
      db.run(`

CREATE TABLE IF NOT EXISTS payments (
  id INTEGER PRIMARY KEY AUTOINCREMENT,
  bookingId INTEGER NOT NULL,
  userId INTEGER NOT NULL,
  amount REAL NOT NULL,
  paymentDate TEXT NOT NULL,
  paymentMethod TEXT,
  status TEXT NOT NULL, -- e.g., 'paid', 'refunded', 'pending'
  FOREIGN KEY (bookingId) REFERENCES bookings(id),
  FOREIGN KEY (userId) REFERENCES users(id)
);
      `, (err) => {
        if (err) {
          reject(err);
          return;
        }
      });
      db.run(`
        CREATE TABLE IF NOT EXISTS refunds (
          id INTEGER PRIMARY KEY AUTOINCREMENT,
          paymentId INTEGER NOT NULL,
          refundDate TEXT NOT NULL,
          refundAmount REAL NOT NULL,
          reason TEXT,
          FOREIGN KEY (paymentId) REFERENCES payments(id)
        );
      `, (err) => {
        if (err) {
          reject(err);
          return;
        }
      });


      resolve();
    });
  });
}

async function seedConsultants() {
  // Check if users table is empty
  return new Promise((resolve, reject) => {
    db.get(
      "SELECT COUNT(*) AS count FROM users WHERE isConsultant = 1",
      (err, row) => {
        if (err) {
          reject(err);
          return;
        }

        const count = row.count;

        if (count === 0) {
          // If consultants table is empty, seed with dummy data
          const stmt = db.prepare(`
            INSERT INTO users (fullName, email, password, role, phone, isConsultant, bio, qualification, areasOfExpertise, speciality, availability, bankAccount, isApproved, profilePicture)
            VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
          `);

          const consultants = [
            {
              fullName: "Dr. Jane Doe",
              email: "jane.doe@example.com",
              password: "password123",
              role: "consultant",
              phone: "555-123-4567",
              bio: "Experienced cardiologist",
              qualification: "MD, Cardiology",
              areasOfExpertise: "Heart failure, Hypertension",
              speciality: "Cardiology",
              availability: '{"Monday": "9:00-17:00", "Tuesday": "9:00-17:00"}',
              bankAccount: "1234567890",
              isApproved: 1,
              profilePicture: "https://placehold.co/200x200",
            },
            {
              fullName: "Dr. John Smith",
              email: "john.smith@example.com",
              password: "password456",
              role: "consultant",
              phone: "555-987-6543",
              bio: "Neurologist specializing in migraines",
              qualification: "PhD, Neurology",
              areasOfExpertise: "Migraines, Epilepsy",
              speciality: "Neurology",
              availability: '{"Wednesday": "10:00-18:00", "Thursday": "10:00-18:00"}',
              bankAccount: "0987654321",
              isApproved: 0,
              profilePicture: "https://placehold.co/200x200",
            },
            {
              fullName: "Dr. Emily Chen",
              email: "emily.chen@example.com",
              password: "password789",
              role: "consultant",
              phone: "555-555-5555",
              bio: "Pediatrician with a passion for child health",
              qualification: "MD, Pediatrics",
              areasOfExpertise: "Childhood illnesses, Vaccinations",
              speciality: "Pediatrics",
              availability: '{"Friday": "8:00-16:00", "Saturday": "8:00-12:00"}',
              bankAccount: "1122334455",
              isApproved: 1,
              profilePicture: "https://placehold.co/200x200",
            },
          ];

          consultants.forEach((consultant) => {
            const {
              fullName,
              email,
              password,
              role,
              phone,
              bio,
              qualification,
              areasOfExpertise,
              speciality,
              availability,
              bankAccount,
              isApproved,
              profilePicture,
            } = consultant;

            stmt.run(
              [
                fullName,
                email,
                password,
                role,
                phone,
                1, // isConsultant = 1
                bio,
                qualification,
                areasOfExpertise,
                speciality,
                availability,
                bankAccount,
                isApproved,
                profilePicture,
              ],
              (err) => {
                if (err) {
                  reject(err);
                  return;
                }
              }
            );
          });

          stmt.finalize((err) => {
            if (err) {
              reject(err);
              return;
            }
            console.log("Consultants table seeded with dummy data.");
            resolve();
          });
        } else {
          console.log("Consultants table already has data, skipping seeding.");
          resolve();
        }
      }
    );
  });
}


module.exports = {
  initializeDatabase,
  getDb: () => db,
};
// File: backend/server.js
const express = require("express");
const cors = require("cors");
const bcrypt = require("bcrypt");
const jwt = require("jsonwebtoken");
const { body, validationResult } = require("express-validator");
const { initializeDatabase, getDb } = require("./database");
const rateLimit = require("express-rate-limit");
const helmet = require("helmet");
const morgan = require("morgan");
const dotenv = require("dotenv");
const multer = require("multer");

dotenv.config();

const app = express();
const port = process.env.PORT || 5555;

// Security Enhancements
const limiter = rateLimit({
  windowMs: 15 * 60 * 1000, // 15 minutes
  max: 100, // Limit each IP to 100 requests per windowMs
  message: "Too many requests from this IP, please try again after 15 minutes",
});

app.use(helmet());
app.use(limiter);
app.use(morgan("dev"));

// CORS Configuration
app.use(
  cors({
    origin: (origin, callback) => {
      const allowedOrigins = ["http://localhost:5173"]; // Use an environment variable for production
      if (!origin || allowedOrigins.indexOf(origin) !== -1) {
        callback(null, true);
      } else {
        callback(new Error("Not allowed by CORS"));
      }
    },
    methods: ["GET", "POST", "PUT", "DELETE", "OPTIONS"],
    allowedHeaders: ["Content-Type", "Authorization"],
  })
);
app.use(express.json());

// Multer configuration
const storage = multer.diskStorage({
  destination: function (req, file, cb) {
    cb(null, "uploads/");
  },
  filename: function (req, file, cb) {
    const uniqueSuffix = Date.now() + "-" + Math.round(Math.random() * 1e9);
    cb(
      null,
      file.fieldname +
        "-" +
        uniqueSuffix +
        "." +
        file.originalname.split(".").pop()
    );
  },
});

const upload = multer({ storage: storage });

// Initialize database
initializeDatabase()
  .then(() => {
// Helper function to handle database errors
const handleDatabaseError = (req, res, err, message) => {
  console.error(req.originalUrl + ": ", err.message);
  if (res && typeof res.status === 'function') {
    return res
      .status(500)
      .json({
        message: message || "Database operation failed",
        error: err.message,
      });
  } else {
    console.error("Response object is not valid:", res);
    return; // Or throw an error, depending on the desired behavior
  }
};

    // Helper function to generate JWT token
    const generateToken = (user) => {
      return jwt.sign(
        { userId: user.id, role: user.role },
        process.env.JWT_SECRET || "secret",
        { expiresIn: "1h" }
      ); // Use environment variable for secret
    };

// User Registration
app.post(
  "/api/register",
  upload.single("profilePicture"),
  [
    body("fullName").notEmpty().withMessage("Full name is required"),
    body("email").isEmail().withMessage("Invalid email address"),
    body("password")
      .isLength({ min: 6 })
      .withMessage("Password must be at least 6 characters long"),
    body("role")
      .isIn(["user", "consultant", "admin"]) //Removed admin role from here
      .withMessage("Invalid role selected"),
    body("phone").notEmpty().withMessage("Phone number is required"), //Added phone validation
  ],
  async (req, res) => {
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
      return res.status(400).json({ errors: errors.array() });
    }

    const {
      fullName,
      email,
      password,
      role,
      phone, //Get the phone number here
      bloodGroup,
      medicalHistory,
      currentPrescriptions,
      bio, // Consultant specific
      qualification, // Consultant specific
      areasOfExpertise,
      speciality, // Consultant specific
      availability,  // Consultant specific
      bankAccount, // Consultant Specific
    } = req.body;

    const profilePicture = req.file ? req.file.path : null;

    try {
      const hashedPassword = await bcrypt.hash(password, 10);
      const db = getDb();

      const isConsultant = role === "consultant" ? 1 : 0; // Set isConsultant flag

      // Construct the SQL query dynamically
      let sql =
        "INSERT INTO users (fullName, email, password, role, phone, isConsultant, profilePicture";
      let values = [fullName, email, hashedPassword, role, phone, isConsultant, profilePicture];

      // Add fields based on role
      if (role === "user") {
        sql += ", bloodGroup, medicalHistory, currentPrescriptions) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
        values.push(bloodGroup, medicalHistory, currentPrescriptions);
      } else if (role === "consultant") {
        sql +=
          ", bio, qualification, areasOfExpertise, speciality, availability, bankAccount, isApproved) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
        values.push(
          bio,
          qualification,
          areasOfExpertise,
          speciality,
          availability,
          bankAccount,
          0
        ); // isApproved default 0
      } else {
        sql += ") VALUES (?, ?, ?, ?, ?, ?, ?)"; //role = admin
      }

      // Execute the SQL query
      db.run(sql, values, function (err) {
        if (err) {
          if (err.message.includes("UNIQUE constraint failed")) {
            return res
              .status(400)
              .json({ message: "Email already exists" });
          }
          return handleDatabaseError(
            req,
            res,
            err,
            "Registration failed due to database error"
          );
        }

        const userId = this.lastID;

        // Send successful response
        res.status(201).json({
          id: userId,
          fullName,
          email,
          phone,
          role,
          isConsultant,
          isApproved: 0,
          profilePicture,
        });
      });
    } catch (error) {
      console.error(error);
      res.status(500).json({ message: "Registration failed" });
    }
  }
);
    // User Login
    app.post(
      "/api/login",
      [
        body("email").isEmail().withMessage("Invalid email address"),
        body("password").notEmpty().withMessage("Password is required"),
      ],
      async (req, res) => {
        const errors = validationResult(req);
        if (!errors.isEmpty()) {
          return res.status(400).json({ errors: errors.array() });
        }

        const { email, password } = req.body;
        try {
          const db = getDb();
          db.get(
            "SELECT * FROM users WHERE email = ?",
            [email],
            async (err, user) => {
              if (err) {
                return handleDatabaseError(
                  res,
                  err,
                  "Login failed due to database error"
                );
              }

              if (!user) {
                return res.status(400).json({ message: "Invalid credentials" });
              }

              const passwordMatch = await bcrypt.compare(
                password,
                user.password
              );
              if (!passwordMatch) {
                return res.status(400).json({ message: "Invalid credentials" });
              }

              const token = generateToken(user);
              res.json({
                token,
                role: user.role,
                userId: user.id,
                isConsultant: user.isConsultant,
                isApproved: user.isApproved,
                profilePicture: user.profilePicture,
              });
            }
          );
        } catch (error) {
          console.error(error);
          res.status(500).json({ message: "Login failed" });
        }
      }
    );

    // Authentication Middleware
    const authenticateToken = (req, res, next) => {
      const authHeader = req.headers["authorization"];
      const token = authHeader && authHeader.split(" ")[1];

      if (!token) {
        return res.status(401).json({ message: "Authentication required" });
      }

      jwt.verify(token, process.env.JWT_SECRET || "secret", (err, user) => {
        if (err) {
          return res
            .status(403)
            .json({ message: "Invalid token", error: err.message });
        }
        req.user = user;
        next();
      });
    };

    // User Profile (GET)
    app.get("/api/profile", authenticateToken, (req, res) => {
      const userId = req.user.userId;
      const db = getDb();

      db.get(
        `SELECT
            id,
            fullName,
            email,
            role,
            phone,
            profilePicture,
            bloodGroup,
            medicalHistory,
            currentPrescriptions,
            isConsultant,
            bio,
            qualification,
            areasOfExpertise,
            speciality,
            availability,
            bankAccount,
            isApproved
          FROM users WHERE id = ?`,
        [userId],
        (err, user) => {
          if (err) {
            return handleDatabaseError(res, err, "Failed to retrieve profile");
          }

          if (!user) {
            return res.status(404).json({ message: "Profile not found" });
          }

          res.json(user);
        }
      );
    });

    // User Profile (PUT)
    app.put(
      "/api/profile",
      upload.single("profilePicture"),
      authenticateToken,
      [
        body("fullName").notEmpty().withMessage("Full name is required"),
        body("email").isEmail().withMessage("Invalid email address"),
      ],
      (req, res) => {
        const errors = validationResult(req);
        if (!errors.isEmpty()) {
          return res.status(400).json({ errors: errors.array() });
        }

        const userId = req.user.userId;
        const {
          fullName,
          email,
          bloodGroup,
          medicalHistory,
          currentPrescriptions,
          phone,
          bio,
          qualification,
          areasOfExpertise,
          speciality,
          availability,
          bankAccount,
          } = req.body;
        const profilePicture = req.file ? req.file.path : null;
        const db = getDb();

        let sql = "UPDATE users SET fullName = ?, email = ?";
        const values = [fullName, email];

        if (req.user.role === "user") {
          sql +=
            ", bloodGroup = ?, medicalHistory = ?, currentPrescriptions = ?";
          values.push(bloodGroup, medicalHistory, currentPrescriptions);
        } else if (req.user.role === "consultant") {
          sql += ", phone = ?, bio = ?, qualification = ?, areasOfExpertise = ?, speciality = ?, availability = ?, bankAccount = ?";
          values.push(phone, bio, qualification, areasOfExpertise, speciality, availability, bankAccount);
        }
        sql += ", profilePicture = ? WHERE id = ?";
        values.push(profilePicture, userId);
        db.run(sql, values, (err) => {
          if (err) {
            return handleDatabaseError(res, err, "Failed to update profile");
          }

          res.json({ id: userId, fullName, email, profilePicture });
        });
      }
    );

    // Consultant Profile (GET)
    app.get("/api/consultant/profile", authenticateToken, (req, res) => {
      const userId = req.user.userId;
      const db = getDb();
      console.log("user: ", req.user);

      // First, check if the user is a consultant
      db.get(
        "SELECT * FROM users WHERE id = ? AND isConsultant = 1",
        [userId],
        (err, user) => {
          if (err) {
            return handleDatabaseError(res, err, "Failed to check user role");
          }

          if (!user) {
            return res
              .status(403)
              .json({ message: "User is not a consultant", user: user });
          }

          // If the user is a consultant, retrieve the consultant profile
          res.json(user);
        }
      );
    });

    // Consultant Profile (PUT)
    app.put(
      "/api/consultant/profile",
      authenticateToken,
      [
        body("specialty").notEmpty().withMessage("Specialty is required"),
        body("specialty")
          .isLength({ max: 50 })
          .withMessage("Specialty must be less than 50 characters"),
        body("qualifications")
          .notEmpty()
          .withMessage("Qualifications are required"),
        body("availability").notEmpty().withMessage("Availability is required"),
      ],
      (req, res) => {
        const userId = req.user.userId;
        const { specialty, qualifications, availability } = req.body;
        const db = getDb();

        // Verify if the user is a consultant before updating the profile
        db.get(
          "SELECT isConsultant FROM users WHERE id = ?",
          [userId],
          (err, user) => {
            if (err) {
              return handleDatabaseError(res, err, "Failed to check user role");
            }

            if (!user || user.isConsultant !== 1) {
              return res
                .status(403)
                .json({ message: "User is not a consultant" });
            }

            // Update the consultant profile
            db.run(
              "UPDATE users SET specialty = ?, qualification = ?, availability = ? WHERE id = ?",
              [specialty, qualifications, availability, userId],
              (err) => {
                if (err) {
                  return handleDatabaseError(
                    res,
                    err,
                    "Failed to update consultant profile"
                  );
                }

                res.json({ userId, specialty, qualifications, availability });
              }
            );
          }
        );
      }
    );

    // List Consultants (GET)
    app.get("/api/consultants", (req, res) => {
      const { specialty, rating, availability } = req.query;
      let query = "SELECT * FROM users WHERE isConsultant = 1"; // Start with a base query

      const params = [];
      if (specialty) {
        query += " AND specialty LIKE ?";
        params.push(`%${specialty}%`);
      }
      if (availability) {
        query += " AND availability LIKE ?";
        params.push(`%${availability}%`);
      }

      const db = getDb();
      db.all(query, params, (err, consultants) => {
        if (err) {
          console.error(err.message);
          return res
            .status(500)
            .json({ message: "Failed to retrieve consultants" });
        }
        res.json(consultants);
      });
    });

    // Get Consultant by ID (GET)
    app.get("/api/consultants/:id", (req, res) => {
      const consultantId = req.params.id;
      const db = getDb();

      db.get(
        "SELECT * FROM users WHERE id = ? AND isConsultant = 1",
        [consultantId],
        (err, consultant) => {
          if (err) {
            return handleDatabaseError(
              res,
              err,
              "Failed to retrieve consultant"
            );
          }

          if (!consultant) {
            return res.status(404).json({ message: "Consultant not found" });
          }

          res.json(consultant);
        }
      );
    });

    // Bookings (GET and POST)
    app.get("/api/bookings", authenticateToken, (req, res) => {
      const userId = req.user.userId;
      const db = getDb();

      db.all(
        "SELECT * FROM bookings WHERE userId = ?",
        [userId],
        (err, bookings) => {
          if (err) {
            return handleDatabaseError(res, err, "Failed to retrieve bookings");
          }

          res.json(bookings);
        }
      );
    });

    app.post(
      "/api/bookings",
      authenticateToken,
      [
        body("consultantId")
          .notEmpty()
          .withMessage("Consultant ID is required"),
        body("date").notEmpty().withMessage("Date is required"),
        body("time").notEmpty().withMessage("Time is required"),
      ],
      async (req, res) => {
        const errors = validationResult(req);
        if (!errors.isEmpty()) {
          return res.status(400).json({ errors: errors.array() });
        }
    
        const userId = req.user.userId;
        const { consultantId, date, time, status = "pending" } = req.body;
        const db = getDb();
    
        // Validate that the consultantId is a valid integer
        if (isNaN(consultantId)) {
          return res
            .status(400)
            .json({ message: "Invalid consultant ID. Must be a number." });
        }
        console.log(req.body); // ADDED: log entire body for debugging
        console.log(req.user);
        // Fetch consultant information, including availability
        db.get(
          "SELECT availability, speciality FROM users WHERE id = ? AND isConsultant = 1",
          [consultantId],
          async (err, consultant) => {
            if (err) {
              console.error("Error retrieving consultant availability:", err); // Enhanced logging
              return handleDatabaseError(
                res,
                err,
                "Failed to retrieve consultant availability"
              );
            }
        // ADDED: log consultant data
            if (!consultant) {
              return res.status(404).json({ message: "Consultant not found." });
            }
        console.log(consultant)
            try {
              // Validate that the specified time is in the consultant's availability
              let availableTimes = JSON.parse(consultant.availability);
              const bookingDay = new Date(date).toLocaleDateString("en-US", {
                weekday: "long",
              });
              // Check if bookingDay is a valid day of the week
              if (!availableTimes[bookingDay]) {
                return res.status(400).json({
                  message:
                    "Consultant is not available on the specified day. Check days with consultant.",
                });
              }
    
              // Validate that time is in the consultant's availability
              const validTimes = availableTimes[bookingDay].split(",");
              if (!validTimes.includes(time)) {
                return res.status(400).json({
                  message:
                    "Consultant is not available on the specified time. Check valid times.",
                });
              }
    
              // Additional validation
              db.get(
                "SELECT COUNT(*) AS count FROM bookings WHERE consultantId = ? AND date = ? AND time = ?",
                [consultantId, date, time],
                (err, row) => {
                  if (err) {
                    console.error("Error checking for conflicting bookings:", err);
                    return handleDatabaseError(
                      res,
                      err,
                      "Failed to check consultant availability"
                    );
                  }
    
                  if (row.count > 0) {
                    return res.status(400).json({
                      message:
                        "Consultant is already booked for this date and time.",
                    });
                  }
    
                  db.get(
                    "SELECT COUNT(*) AS count FROM bookings WHERE userId = ? AND date = ? AND time = ?",
                    [userId, date, time],
                    (err, row) => {
                      if (err) {
                        console.error("Error checking for user availability", err);
                        return handleDatabaseError(
                          res,
                          err,
                          "Failed to check user availability"
                        );
                      }
    
                      if (row.count > 0) {
                        return res.status(400).json({
                          message: "You already have a booking for this date and time.",
                        });
                      }
    
                      db.run(
                        "INSERT INTO bookings (userId, consultantId, date, time, status) VALUES (?, ?, ?, ?, ?)",
                        [userId, consultantId, date, time, status],
                        function (err) {
                          if (err) {
                            console.error("Error inserting into bookings",err)
                            return handleDatabaseError(
                              res,
                              err,
                              "Failed to create booking"
                            );
                          }
                          const bookingId = this.lastID;
    
                          const paymentDate = new Date().toISOString();
                          const amount = 100; // Setting an amount (should be retrieved from database)
    
                          // Insert payment information into the payments table
                          db.run(
                            "INSERT INTO payments (bookingId, userId, amount, paymentDate, status) VALUES (?, ?, ?, ?, ?)",
                            [bookingId, userId, amount, paymentDate, "paid"],
                            function (err) {
                              if (err) {
                                console.error("Error inserting payment:",err)
                                // If there's an error inserting payment info, handle the error and potentially roll back the booking creation
                                return handleDatabaseError(
                                  res,
                                  err,
                                  "Failed to create payment information"
                                );
                              }
                              const paymentId = this.lastID;
                              res.status(201).json({
                                id: bookingId,
                                userId,
                                consultantId,
                                date,
                                time,
                                status,
                                paymentId,
                              });
                            }
                          );
                        }
                      );
                    }
                  );
                }
              );
            } catch (parseError) {
              console.error("Error parsing availability data:", parseError)
              return res
                .status(500)
                .json({ message: "Failed to parse availability data" });
            }
          }
        );
      }
    );

// API to Fetch Consultant Availability
app.get("/api/consultant/:consultantId/availability", (req, res) => {
  const consultantId = req.params.consultantId;
  const db = getDb();

  db.get(
    "SELECT availability FROM users WHERE id = ? AND isConsultant = 1",
    [consultantId],
    (err, consultant) => {
      if (err) {
        return handleDatabaseError(
          res,
          err,
          "Failed to retrieve consultant availability"
        );
      }

      if (!consultant) {
        return res.status(404).json({ message: "Consultant not found" });
      }

      try {
        const availability = JSON.parse(consultant.availability);
        res.json(availability);
      } catch (error) {
        return res
          .status(500)
          .json({ message: "Failed to parse availability data" });
      }
    }
  );
});

    // Booking acceptance route
    app.put("/api/bookings/:id/accept", authenticateToken, (req, res) => {
      const bookingId = req.params.id;
      const db = getDb();

      db.get(
        "SELECT consultantId, date, time FROM bookings WHERE id = ?",
        [bookingId],
        (err, booking) => {
          if (err) {
            return handleDatabaseError(
              res,
              err,
              "Failed to retrieve booking details"
            );
          }

          if (!booking) {
            return res.status(404).json({ message: "Booking not found" });
          }

          db.get(
            "SELECT COUNT(*) AS count FROM bookings WHERE consultantId = ? AND date = ? AND time = ? AND status = 'accepted'",
            [booking.consultantId, booking.date, booking.time],
            (err, row) => {
              if (err) {
                return handleDatabaseError(
                  res,
                  err,
                  "Failed to check for conflicting bookings"
                );
              }

              if (row.count > 0) {
                return res
                  .status(400)
                  .json({
                    message:
                      "This timeslot is already booked by another booking.",
                  });
              }

              db.run(
                "UPDATE bookings SET status = 'accepted' WHERE id = ?",
                [bookingId],
                function (err) {
                  if (err) {
                    return handleDatabaseError(
                      res,
                      err,
                      "Another booking is already accepted for same timeslot, please consider cancelling that first."
                    );
                  }
                  if (this.changes === 0) {
                    return res
                      .status(404)
                      .json({ message: "Booking not found" });
                  }
                  res.json({ message: "Booking accepted successfully" });
                }
              );
            }
          );
        }
      );
    });

    app.put("/api/bookings/:id/cancel", authenticateToken, (req, res) => {
      const bookingId = req.params.id;
      const db = getDb();
  
      db.get(
        "SELECT consultantId, date, time FROM bookings WHERE id = ?",
        [bookingId],
        (err, booking) => {
          if (err) {
            return handleDatabaseError(
              res,
              err,
              "Failed to retrieve booking details"
            );
          }
  
          if (!booking) {
            return res.status(404).json({ message: "Booking not found" });
          }
  
          db.run(
            "UPDATE bookings SET status = 'canceled' WHERE id = ?",
            [bookingId],
            function (err) {
              if (err) {
                return handleDatabaseError(
                  res,
                  err,
                  "Failed to update booking"
                );
              }
              if (this.changes === 0) {
                return res.status(404).json({ message: "Booking not found" });
              }
             //Refund calculation logic
              db.get(
                "SELECT id, amount FROM payments WHERE bookingId = ?",
                [bookingId],
                (err, payment) => {
                  if (err) {
                    return handleDatabaseError(
                      res,
                      err,
                      "Failed to fetch payment details"
                    );
                  }
                  if (payment) {
                    // Calculating the refund amount and inserting the details
                    const refundAmount = payment.amount * 0.9; // Deducting a 10% cancellation fee
  
                    db.run(
                      "INSERT INTO refunds (paymentId, refundDate, refundAmount, reason) VALUES (?, ?, ?, ?)",
                      [payment.id, new Date().toISOString(), refundAmount, "Booking cancellation"],
                      function (err) {
                        if (err) {
                          return handleDatabaseError(
                            res,
                            err,
                            "Failed to process refund"
                          );
                        }
                        res.json({ message: "Booking canceled successfully", refundId: this.lastID });
                      });
  
                    // Update the payment status to refunded after the refund amount calculation
                    db.run(
                      "UPDATE payments SET status = 'refunded' WHERE bookingId = ?",
                      [bookingId],
                      function (err) {
                        if (err) {
                          return handleDatabaseError(
                            res,
                            err,
                            "Failed to update payment status"
                          );
                        }
                        if (this.changes === 0) {
                          return res
                            .status(404)
                            .json({ message: "Payment not found" });
                        }
  
                      }
                    );
                  } else{
                    return res.status(404).json({ message: "Payment not found" });
                  }
                }
              );
            }
          );
        }
      );
    });

    app.put("/api/bookings/:id/reject", authenticateToken, (req, res) => {
      const bookingId = req.params.id;
      const db = getDb();

      db.get(
        "SELECT consultantId, date, time FROM bookings WHERE id = ?",
        [bookingId],
        (err, booking) => {
          if (err) {
            return handleDatabaseError(
              res,
              err,
              "Failed to retrieve booking details"
            );
          }

          if (!booking) {
            return res.status(404).json({ message: "Booking not found" });
          }

          db.get(
            "SELECT COUNT(*) AS count FROM bookings WHERE consultantId = ? AND date = ? AND time = ? AND status = 'accepted'",
            [booking.consultantId, booking.date, booking.time],
            (err, row) => {
              if (err) {
                return handleDatabaseError(
                  res,
                  err,
                  "Failed to check for conflicting bookings"
                );
              }

              if (row.count > 0) {
                return res
                  .status(400)
                  .json({
                    message:
                      "This timeslot is already booked by another booking.",
                  });
              }

              db.run(
                "UPDATE bookings SET status = 'rejected' WHERE id = ?",
                [bookingId],
                function (err) {
                  if (err) {
                    return handleDatabaseError(
                      res,
                      err,
                      "Failed to update booking"
                    );
                  }
                  if (this.changes === 0) {
                    return res
                      .status(404)
                      .json({ message: "Booking not found" });
                  }
                  res.json({ message: "Booking accepted successfully" });
                }
              );
            }
          );
        }
      );
    });

    // Health Records (GET and POST)
    app.get("/api/healthrecords", authenticateToken, (req, res) => {
      const userId = req.user.userId;
      const db = getDb();

      db.all(
        "SELECT * FROM healthrecords WHERE userId = ?",
        [userId],
        (err, healthrecords) => {
          if (err) {
            return handleDatabaseError(
              res,
              err,
              "Failed to retrieve health records"
            );
          }

          res.json(healthrecords);
        }
      );
    });

    app.post(
      "/api/healthrecords",
      authenticateToken,
      [
        body("medicalHistory")
          .notEmpty()
          .withMessage("Medical history is required"),
        body("ongoingTreatments")
          .notEmpty()
          .withMessage("Ongoing treatments are required"),
        body("prescriptions")
          .notEmpty()
          .withMessage("Prescriptions are required"),
      ],
      (req, res) => {
        const errors = validationResult(req);
        if (!errors.isEmpty()) {
          return res.status(400).json({ errors: errors.array() });
        }

        const userId = req.user.userId;
        const { medicalHistory, ongoingTreatments, prescriptions } = req.body;
        const db = getDb();

        db.run(
          "INSERT INTO healthrecords (userId, medicalHistory, ongoingTreatments, prescriptions) VALUES (?, ?, ?, ?)",
          [userId, medicalHistory, ongoingTreatments, prescriptions],
          function (err) {
            if (err) {
              return handleDatabaseError(
                res,
                err,
                "Failed to create health record"
              );
            }

            const recordId = this.lastID;
            res
              .status(201)
              .json({
                id: recordId,
                userId,
                medicalHistory,
                ongoingTreatments,
                prescriptions,
              });
          }
        );
      }
    );

    // Messages (GET and POST)
    app.get("/api/messages", authenticateToken, (req, res) => {
      const userId = req.user.userId;
      const db = getDb();

      db.all(
        "SELECT * FROM messages WHERE userId = ?",
        [userId],
        (err, messages) => {
          if (err) {
            return handleDatabaseError(res, err, "Failed to retrieve messages");
          }

          res.json(messages);
        }
      );
    });

    app.post(
      "/api/messages",
      authenticateToken,
      [
        body("consultantId")
          .notEmpty()
          .withMessage("Consultant ID is required"),
        body("message").notEmpty().withMessage("Message text is required"),
      ],
      (req, res) => {
        const errors = validationResult(req);
        if (!errors.isEmpty()) {
          return res.status(400).json({ errors: errors.array() });
        }

        const userId = req.user.userId;
        const { consultantId, message } = req.body;
        const timestamp = new Date().toISOString();
        const db = getDb();

        db.run(
          "INSERT INTO messages (userId, consultantId, message, timestamp) VALUES (?, ?, ?, ?)",
          [userId, consultantId, message, timestamp],
          function (err) {
            if (err) {
              return handleDatabaseError(res, err, "Failed to create message");
            }

            const messageId = this.lastID;
            res
              .status(201)
              .json({
                id: messageId,
                userId,
                consultantId,
                message,
                timestamp,
              });
          }
        );
      }
    );

    // Payments (GET)
    app.get("/api/payments", authenticateToken, (req, res) => {
      const userId = req.user.userId;
      const db = getDb();

      db.all(
        "SELECT * FROM payments WHERE userId = ?",
        [userId],
        (err, payments) => {
          if (err) {
            return handleDatabaseError(res, err, "Failed to retrieve payments");
          }

          res.json(payments);
        }
      );
    });

    // Reviews (POST)
    app.post(
      "/api/reviews",
      authenticateToken,
      [
        body("consultantId")
          .notEmpty()
          .withMessage("Consultant ID is required"),
        body("rating")
          .isInt({ min: 1, max: 5 })
          .withMessage("Rating must be between 1 and 5"),
        body("review").notEmpty().withMessage("Review text is required"),
      ],
      (req, res) => {
        const errors = validationResult(req);
        if (!errors.isEmpty()) {
          return res.status(400).json({ errors: errors.array() });
        }

        const userId = req.user.userId;
        const { consultantId, rating, review } = req.body;
        const db = getDb();

        db.run(
          "INSERT INTO reviews (userId, consultantId, rating, review) VALUES (?, ?, ?, ?)",
          [userId, consultantId, rating, review],
          function (err) {
            if (err) {
              return handleDatabaseError(res, err, "Failed to create review");
            }

            const reviewId = this.lastID;
            res
              .status(201)
              .json({ id: reviewId, userId, consultantId, rating, review });
          }
        );
      }
    );

    // Admin Authentication Middleware
    const authenticateAdmin = (req, res, next) => {
      const authHeader = req.headers["authorization"];
      const token = authHeader && authHeader.split(" ")[1];

      if (!token) {
        return res.status(401).json({ message: "Authentication required" });
      }

      jwt.verify(token, process.env.JWT_SECRET || "secret", (err, user) => {
        if (err) {
          return res
            .status(403)
            .json({ message: "Invalid token", error: err.message });
        }

        if (user.role !== "admin") {
          return res
            .status(403)
            .json({ message: "Unauthorized: Admin access required" });
        }

        req.user = user;
        next();
      });
    };

    // Admin - Get All Users
    app.get("/api/admin/users", authenticateAdmin, (req, res) => {
      const db = getDb();

      db.all(
        "SELECT id, fullName, email, role, isConsultant, bloodGroup, medicalHistory, currentPrescriptions, phone, areasOfExpertise, isApproved, profilePicture FROM users",
        [],
        (err, users) => {
          if (err) {
            return handleDatabaseError(res, err, "Failed to retrieve users");
          }

          res.json(users);
        }
      );
    });

    // Admin - Get All Consultants
    app.get("/api/admin/consultants", authenticateAdmin, (req, res) => {
      const db = getDb();

      db.all("SELECT * FROM users WHERE isConsultant = 1", [], (err, consultants) => {
        if (err) {
          return handleDatabaseError(
            res,
            err,
            "Failed to retrieve consultants"
          );
        }

        res.json(consultants);
      });
    });

    // Admin - Get All Bookings
    app.get("/api/admin/bookings", authenticateAdmin, (req, res) => {
      const db = getDb();

      db.all("SELECT * FROM bookings", [], (err, bookings) => {
        if (err) {
          return handleDatabaseError(res, err, "Failed to retrieve bookings");
        }

        res.json(bookings);
      });
    });

    // Contact Form Submission (POST)
    app.post(
      "/api/contact",
      [
        body("name").notEmpty().withMessage("Name is required"),
        body("email").isEmail().withMessage("Invalid email address"),
        body("subject").notEmpty().withMessage("Subject is required"),
        body("message").notEmpty().withMessage("Message is required"),
      ],
      (req, res) => {
        const errors = validationResult(req);
        if (!errors.isEmpty()) {
          return res.status(400).json({ errors: errors.array() });
        }

        const { name, email, subject, message } = req.body;
        const db = getDb();

        db.run(
          "INSERT INTO contacts (name, email, subject, message) VALUES (?, ?, ?, ?)",
          [name, email, subject, message],
          function (err) {
            if (err) {
              console.error(err.message);
              return res
                .status(500)
                .json({ message: "Failed to submit contact form" });
            }

            res
              .status(200)
              .json({ message: "Contact form submitted successfully" });
          }
        );
      }
    );

    // Consultant Bookings Route
    app.get("/api/consultant/bookings", authenticateToken, (req, res) => {
      const userId = req.user.userId;
      const db = getDb();

      // Verify if the user is a consultant
      db.get(
        "SELECT isConsultant FROM users WHERE id = ?",
        [userId],
        (err, user) => {
          if (err) {
            return handleDatabaseError(res, err, "Failed to check user role");
          }

          if (!user || user.isConsultant !== 1) {
            return res
              .status(403)
              .json({ message: "User is not a consultant" });
          }

          // Get the consultant's bookings
          db.all(
            "SELECT * FROM bookings WHERE consultantId = ?",
            [userId],
            (err, bookings) => {
              if (err) {
                return handleDatabaseError(
                  res,
                  err,
                  "Failed to retrieve consultant bookings"
                );
              }
              res.json(bookings);
            }
          );
        }
      );
    });

    app.get("/api/getDetails/:bookingId", authenticateToken, (req, res) => {
      const { bookingId } = req.params;

      // Validate that bookingId is a valid integer
      if (isNaN(bookingId)) {
        return res.status(400).json({ error: "Invalid booking ID" });
      }

      const db = getDb();

      db.get(
        `SELECT u.id, u.fullName, u.email, u.password, u.role, u.isConsultant, u.phone,
           u.bloodGroup, u.medicalHistory, u.currentPrescriptions,
           u.areasOfExpertise, u.isApproved, u.profilePicture, u.speciality, u.availability, u.bankAccount, u.qualification, u.bio
         FROM users u
         JOIN bookings b ON u.id = b.userId
         WHERE b.id = ?;`,
        [bookingId],
        (err, userDetails) => {
          if (err) {
            return handleDatabaseError(res, err, "Failed to retrieve user details");
          }

          if (!userDetails) {
            return res.status(404).json({ error: "Booking not found" });
          }

          // Fetch all health records related to the user
          db.all(
            `SELECT hr.medicalHistory, hr.ongoingTreatments, hr.prescriptions
             FROM healthrecords hr
             WHERE hr.userId = ?;`,
            [userDetails.id],
            (err, healthRecords) => {
              if (err) {
                return handleDatabaseError(res, err, "Failed to retrieve health records");
              }

              // Return user details along with their health records
              res.json({
                user: userDetails,
                healthRecords: healthRecords || [], // Ensure an empty array if no records found
              });
            }
          );
        }
      );
    });



    // Consultant approval route for admin
    app.put(
      "/api/admin/consultants/:userId/approve",
      authenticateAdmin,
      (req, res) => {
        const { userId } = req.params;
        const db = getDb();

        db.run(
          "UPDATE users SET isApproved = 1 WHERE id = ?",
          [userId],
          function (err) {
            if (err) {
              return handleDatabaseError(
                res,
                err,
                "Failed to approve consultant"
              );
            }
            if (this.changes === 0) {
              return res.status(404).json({ message: "Consultant not found" });
            }
            res.json({ message: "Consultant approved successfully" });
          }
        );
      }
    );

    // Route to get all bookings for a specific consultant ID
    app.get(
      "/api/consultants/:consultantId/bookings",
      authenticateToken,
      (req, res) => {
        const { consultantId } = req.params;
        const userId = req.user.userId;
        const db = getDb();

        // Verify if the requesting user is the consultant or admin
        db.get(
          "SELECT isConsultant, id FROM users WHERE id = ?",
          [consultantId],
          (err, consultant) => {
            if (err) {
              return handleDatabaseError(
                res,
                err,
                "Failed to check consultant"
              );
            }

            if (!consultant || consultant.isConsultant !== 1) {
              return res.status(404).json({ message: "Consultant not found or is not a consultant" });
            }

            //Check If consultant or Admin is requesting bookings
            db.get(
              "SELECT role FROM users WHERE id = ?",
              [userId],
              (err, user) => {
                if (err) {
                  return handleDatabaseError(
                    res,
                    err,
                    "Failed to check user role"
                  );
                }

                if (!user) {
                  return res.status(404).json({ message: "User not found" });
                }

                // Get all bookings for the consultant
                db.all(
                  "SELECT * FROM bookings WHERE consultantId = ?",
                  [consultantId],
                  (err, bookings) => {
                    if (err) {
                      return handleDatabaseError(
                        res,
                        err,
                        "Failed to retrieve bookings"
                      );
                    }
                    res.json(bookings);
                  }
                );
              }
            );
          }
        );
      }
    );

    // Start the server
    app.listen(port, () => {
      console.log(`Server is running on port ${port}`);
    });
  })
  .catch((error) => {
    console.error("Failed to initialize database:", error);
  });
// File: frontend/App.jsx
import React, { useState, useEffect, useCallback } from 'react';
import { BrowserRouter as Router, Route, Routes, Link, Navigate } from 'react-router-dom';
import Navbar from './components/Navbar';
import Footer from './components/Footer';
import Homepage from './pages/Homepage';
import AboutUs from './pages/AboutUs';
import ContactUs from './pages/ContactUs';
import PrivacyPolicy from './pages/PrivacyPolicy';
import TermsOfService from './pages/TermsOfService';
import NotFound from './pages/NotFound';
import Login from './pages/Login';
import Register from './pages/Register';
import UserProfile from './pages/UserProfile';
import ConsultantProfile from './pages/ConsultantProfile';
import ConsultantSearch from './pages/ConsultantSearch';
import ConsultantDetails from './pages/ConsultantDetails';
import Booking from './pages/Booking';
import ConsultationDashboard from './pages/ConsultationDashboard';
import HealthRecords from './pages/HealthRecords';
import Messaging from './pages/Messaging';
import Payment from './pages/Payment';
import Review from './pages/Review';
import AdminDashboard from './pages/AdminDashboard';
import ConsultantDashboardPage from './pages/ConsultantDashboardPage';
import './App.css';
import './index.css'; //Importing index.css to solve global styling issues

function App() {
  // Use state to manage login status, user role, and consultant status
  const [isLoggedIn, setIsLoggedIn] = useState(false);
  const [userRole, setUserRole] = useState('guest');
  const [isConsultant, setIsConsultant] = useState(() => { // Initialize with boolean
    const storedValue = localStorage.getItem('isConsultant');
    return storedValue === 'true'; // Convert string to boolean
  });
  const [isApproved, setIsApproved] = useState(false);

  // Function to update state from localStorage
  const updateStateFromLocalStorage = useCallback(() => {
    setIsLoggedIn(localStorage.getItem('token') !== null);
    setUserRole(localStorage.getItem('userRole') || 'guest');
    setIsConsultant(localStorage.getItem('isConsultant') === 'true');
    setIsApproved(localStorage.getItem('isApproved') === 'true');
  }, []);

  useEffect(() => {
    // Call the function on component mount
    updateStateFromLocalStorage();

    // Set up a listener for localStorage changes
    window.addEventListener('storage', updateStateFromLocalStorage);

    // Clean up the listener when the component unmounts
    return () => {
      window.removeEventListener('storage', updateStateFromLocalStorage);
    };
  }, [updateStateFromLocalStorage]);

  // Callback function to update login state and user info
  const handleLoginSuccess = useCallback((role, isConsultant, isApproved) => {
    localStorage.setItem('userRole', role);
    localStorage.setItem('isConsultant', String(isConsultant));
    localStorage.setItem('isApproved', String(isApproved));
    setIsLoggedIn(true);
    setUserRole(role);
    setIsConsultant(Boolean(isConsultant === 1 || isConsultant === true)); // Ensure boolean value
    setIsApproved(Boolean(isApproved));   // Ensure boolean value
  }, []);

  // Callback function to handle logout
  const handleLogout = useCallback(() => {
    localStorage.removeItem('token');
    localStorage.removeItem('userRole');
    localStorage.removeItem('isConsultant');
    localStorage.removeItem('isApproved');
    setIsLoggedIn(false);
    setUserRole('guest');
    setIsConsultant(false);
    setIsApproved(false);
  }, []);

  return (
    <Router>
      <Navbar isLoggedIn={isLoggedIn} userRole={userRole} isConsultant={isConsultant} handleLogout={handleLogout} />
      <div className="min-h-screen">
        <Routes>
          <Route path="/" element={<Homepage />} />
          <Route path="/aboutus" element={<AboutUs />} />
          <Route path="/contactus" element={<ContactUs />} />
          <Route path="/privacypolicy" element={<PrivacyPolicy />} />
          <Route path="/termsofservice" element={<TermsOfService />} />
          <Route path="/login" element={<Login onLoginSuccess={handleLoginSuccess} />} />
          <Route path="/register" element={<Register />} />
          <Route path="/userprofile" element={<UserProfile />} />

          {/* User routes, require login and user role */}
          {isLoggedIn && userRole === 'user' && (
            <>
              <Route path="/consultantsearch" element={<ConsultantSearch />} />
              <Route path="/consultantdetails/:id" element={<ConsultantDetails />} />
              <Route path="/booking/:id" element={<Booking />} />
              <Route path="/consultationdashboard" element={<ConsultationDashboard />} />
              <Route path="/healthrecords" element={<HealthRecords />} />
              <Route path="/messaging" element={<Messaging />} />
              <Route path="/payment" element={<Payment />} />
              <Route path="/review/:id" element={<Review />} />
            </>
          )}

          {/* Consultant profile and dashboard only accessible if logged in as consultant, approved,  Navigate to home if not approved*/}
          {isLoggedIn && userRole === 'consultant' ? (
            isApproved ? (
              <>
                <Route path="/consultantprofile" element={<ConsultantProfile />} />
                <Route path="/consultantdashboard" element={<ConsultantDashboardPage />} />
              </>
            ) : (
              <Route path="/consultantprofile" element={<Navigate to="/" />} />
            )
          ) : null}

          {/* Admin dashboard route, require login and admin role */}
          {isLoggedIn && userRole === 'admin' ? (
            <Route path="/admindashboard" element={<AdminDashboard />} />
          ) : (
            // Redirect to login page if not an admin or not logged in
            <Route path="/admindashboard" element={<Navigate to="/login" />} />
          )}

          <Route path="*" element={<NotFound />} />
        </Routes>
      </div>
      <Footer />
    </Router>
  );
}

export default App;
// File: frontend/ConsultantDashboardPage.jsx
import React, { useState, useEffect } from 'react';
import { getConsultantBookingsById } from '../utils/api'; // Import the missing function
import { Calendar } from 'lucide-react';
import { Navigate } from 'react-router-dom';

const ConsultantDashboardPage = () => {
  const [bookings, setBookings] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState('');
  const [consultantId, setConsultantId] = useState(null);

  useEffect(() => {
    // Function to fetch bookings
    const fetchBookings = async () => {
      setLoading(true);
      setError('');
      try {
        const token = localStorage.getItem('token');
        const storedConsultantId = localStorage.getItem('userId');
        const userRole = localStorage.getItem('userRole');

        if (!token) {
          setError('Authentication required. Please login.');
          return;
        }

        if (userRole !== 'consultant') {
          setError('You are not authorized to access this page.');
          return;
        }


        // Check if storedConsultantId exists and is a valid number
        if (!storedConsultantId || isNaN(parseInt(storedConsultantId, 10))) {
          setError('Consultant ID not found or invalid. Please login again.');
          return;
        }

        // Convert storedConsultantId to a number
        const parsedConsultantId = parseInt(storedConsultantId, 10);

        //Verify consultantId with userId
        const userId = localStorage.getItem('userId');
        if(parsedConsultantId !== parseInt(userId)){
          setError('Unauthorized access: Consultant ID does not match logged-in user.');
          return;
        }

        setConsultantId(parsedConsultantId); // Set the consultantId state


        const data = await getConsultantBookingsById(token, parsedConsultantId);
        setBookings(data);
      } catch (err) {
        setError('Failed to retrieve bookings. Please try again.');
        console.error('Failed to fetch bookings:', err);
      } finally {
        setLoading(false);
      }
    };

    // Call fetchBookings only if consultantId is valid
    if (localStorage.getItem('userId') && localStorage.getItem('userRole') === 'consultant') {
      fetchBookings();
    } else {
      setError('You must be logged in as a Consultant to access this page');
    }

  }, []);

  return (
    <div className="min-h-screen bg-gray-100 p-10">
      <section className="max-w-4xl mx-auto bg-white rounded-2xl shadow-xl p-8">
        <h2 className="text-3xl font-semibold text-gray-800 text-center mb-6">
          Consultant Dashboard
        </h2>
        {loading && <p className="text-center">Loading bookings...</p>}
        {error && <p className="text-center text-red-500">{error}</p>}
        {!loading && !error && bookings.length === 0 && (
          <p className="text-center">No bookings found.</p>
        )}
        {!loading && !error && bookings.length > 0 && (
          <ul className="divide-y divide-gray-200">
            {bookings.map((booking) => (
              <li key={booking.id} className="py-4">
                <div className="flex items-center justify-between">
                  <div>
                    <p className="text-lg font-semibold text-gray-700">
                      <Calendar className="inline-block h-5 w-5 mr-1" />
                      {new Date(booking.date).toLocaleDateString()}
                    </p>
                    <p className="text-gray-600">
                      Time: {booking.time}
                    </p>
                    <p className="text-gray-600">
                      Status: {booking.status}
                    </p>
                  </div>
                </div>
              </li>
            ))}
          </ul>
        )}
      </section>
    </div>
  );
};

export default ConsultantDashboardPage;
// File: frontend/Login.jsx
import React, { useState, useCallback } from 'react';
import { useNavigate } from 'react-router-dom';
import { Mail, Lock } from 'lucide-react';
import { loginUser } from '../utils/api';

const Login = ({ onLoginSuccess }) => {
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [error, setError] = useState('');
  const navigate = useNavigate();

  const handleSubmit = async (e) => {
    e.preventDefault();
    setError('');

    if (!email || !password) {
      setError('Please fill in all fields.');
      return;
    }

    try {
      const data = await loginUser(email, password);
      localStorage.setItem('token', data.token);
      onLoginSuccess(data.role, data.isConsultant, data.isApproved);

      if (data.role === 'consultant') {
        navigate('/consultantdashboard');
      } else if (data.role === 'admin') {
        navigate('/admindashboard');
      }
      else {
        navigate('/consultationdashboard');
      }
    } catch (err) {
      setError('Invalid email or password. Please try again.');
      console.error('Login failed:', err);
    }
  };

  return (
    <div className="min-h-screen bg-gray-100 flex items-center justify-center">
      <div className="bg-white rounded-2xl shadow-xl p-8 max-w-md w-full">
        <h2 className="text-3xl font-semibold text-gray-800 text-center mb-6">
          Login
        </h2>

        {error && (
          <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative mb-4" role="alert">
            <span className="block sm:inline">{error}</span>
          </div>
        )}

        <form onSubmit={handleSubmit}>
          <div className="mb-4">
            <label htmlFor="email" className="block text-gray-700 text-sm font-bold mb-2">
              Email
            </label>
            <div className="relative">
              <div className="absolute inset-y-0 left-0 flex items-center pl-3 pointer-events-none">
                <Mail className="w-5 h-5 text-gray-500" />
              </div>
              <input
                type="email"
                id="email"
                className="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline pl-10"
                placeholder="Email Address"
                value={email}
                onChange={(e) => setEmail(e.target.value)}
              />
            </div>
          </div>

          <div className="mb-6">
            <label htmlFor="password" className="block text-gray-700 text-sm font-bold mb-2">
              Password
            </label>
            <div className="relative">
              <div className="absolute inset-y-0 left-0 flex items-center pl-3 pointer-events-none">
                <Lock className="w-5 h-5 text-gray-500" />
              </div>
              <input
                type="password"
                id="password"
                className="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline pl-10"
                placeholder="Password"
                value={password}
                onChange={(e) => setPassword(e.target.value)}
              />
            </div>
          </div>

          <div className="flex items-center justify-between">
            <button
              className="bg-blue-500 hover:bg-blue-700 text-white font-bold py-3 px-6 rounded-full focus:outline-none focus:shadow-outline"
              type="submit"
            >
              Login
            </button>
            <a className="inline-block align-baseline font-bold text-sm text-blue-500 hover:text-blue-800" href="#">
              Forgot Password?
            </a>
          </div>
        </form>
      </div>
    </div>
  );
};

export default Login;
// File: frontend/Register.jsx
import React, { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { Mail, Lock, User } from 'lucide-react';
import { registerUser } from '../utils/api';

const Register = () => {
  const [fullName, setFullName] = useState('');
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [confirmPassword, setConfirmPassword] = useState('');
  const [role, setRole] = useState('user'); // Default role
  const [bloodGroup, setBloodGroup] = useState('');
  const [medicalHistory, setMedicalHistory] = useState('');
  const [currentPrescriptions, setCurrentPrescriptions] = useState('');
  const [contactInformation, setContactInformation] = useState('');
  const [areasOfExpertise, setAreasOfExpertise] = useState('');
  const [error, setError] = useState('');
  const navigate = useNavigate();

  const handleSubmit = async (e) => {
    e.preventDefault();
    setError('');

    if (!fullName || !email || !password || !confirmPassword || !role) {
      setError('Please fill in all required fields.');
      return;
    }

    if (password !== confirmPassword) {
      setError('Passwords do not match.');
      return;
    }

    try {
      await registerUser(fullName, email, password, role, bloodGroup, medicalHistory, currentPrescriptions, contactInformation, areasOfExpertise);
      navigate('/login');
    } catch (err) {
      setError('Registration failed. Please try again.');
      console.error('Registration failed:', err);
    }
  };

  return (
    <div className="min-h-screen bg-gray-100 flex items-center justify-center">
      <div className="bg-white rounded-2xl shadow-xl p-8 max-w-md w-full">
        <h2 className="text-3xl font-semibold text-gray-800 text-center mb-6">
          Register
        </h2>

        {error && (
          <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative mb-4" role="alert">
            <span className="block sm:inline">{error}</span>
          </div>
        )}

        <form onSubmit={handleSubmit}>
          <div className="mb-4">
            <label htmlFor="role" className="block text-gray-700 text-sm font-bold mb-2">
              Registering as:
            </label>
            <select
              id="role"
              className="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"
              value={role}
              onChange={(e) => setRole(e.target.value)}
            >
              <option value="user">Looking for a Consultant</option>
              <option value="consultant">A Consultant</option>
                <option value="admin">Admin</option>
            </select>
          </div>
          <div className="mb-4">
            <label htmlFor="fullName" className="block text-gray-700 text-sm font-bold mb-2">
              Full Name
            </label>
            <div className="relative">
              <div className="absolute inset-y-0 left-0 flex items-center pl-3 pointer-events-none">
                <User className="w-5 h-5 text-gray-500" />
              </div>
              <input
                type="text"
                id="fullName"
                className="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline pl-10"
                placeholder="Full Name"
                value={fullName}
                onChange={(e) => setFullName(e.target.value)}
              />
            </div>
          </div>

          <div className="mb-4">
            <label htmlFor="email" className="block text-gray-700 text-sm font-bold mb-2">
              Email
            </label>
            <div className="relative">
              <div className="absolute inset-y-0 left-0 flex items-center pl-3 pointer-events-none">
                <Mail className="w-5 h-5 text-gray-500" />
              </div>
              <input
                type="email"
                id="email"
                className="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline pl-10"
                placeholder="Email Address"
                value={email}
                onChange={(e) => setEmail(e.target.value)}
              />
            </div>
          </div>

          <div className="mb-4">
            <label htmlFor="password" className="block text-gray-700 text-sm font-bold mb-2">
              Password
            </label>
            <div className="relative">
              <div className="absolute inset-y-0 left-0 flex items-center pl-3 pointer-events-none">
                <Lock className="w-5 h-5 text-gray-500" />
              </div>
              <input
                type="password"
                id="password"
                className="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline pl-10"
                placeholder="Password"
                value={password}
                onChange={(e) => setPassword(e.target.value)}
              />
            </div>
          </div>

          <div className="mb-6">
            <label htmlFor="confirmPassword" className="block text-gray-700 text-sm font-bold mb-2">
              Confirm Password
            </label>
            <div className="relative">
              <div className="absolute inset-y-0 left-0 flex items-center pl-3 pointer-events-none">
                <Lock className="w-5 h-5 text-gray-500" />
              </div>
              <input
                type="password"
                id="confirmPassword"
                className="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline pl-10"
                placeholder="Confirm Password"
                value={confirmPassword}
                onChange={(e) => setConfirmPassword(e.target.value)}
              />
            </div>
          </div>

          {role === 'user' && (
            <>
              <div className="mb-4">
                <label htmlFor="bloodGroup" className="block text-gray-700 text-sm font-bold mb-2">
                  Blood Group
                </label>
                <input
                  type="text"
                  id="bloodGroup"
                  className="shadow appearance-none border rounded w-full py-2 px-3text-gray-700 leading-tight focus:outline-none focus:shadow-outline"
                  placeholder="Blood Group"
                  value={bloodGroup}
                  onChange={(e) => setBloodGroup(e.target.value)}
                />
              </div>

              <div className="mb-4">
                <label htmlFor="medicalHistory" className="block text-gray-700 text-sm font-bold mb-2">
                  Medical History
                </label>
                <textarea
                  id="medicalHistory"
                  className="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"
                  placeholder="Medical History"
                  value={medicalHistory}
                  onChange={(e) => setMedicalHistory(e.target.value)}
                  rows="3"
                />
              </div>

              <div className="mb-4">
                <label htmlFor="currentPrescriptions" className="block text-gray-700 text-sm font-bold mb-2">
                  Current Prescriptions
                </label>
                <textarea
                  id="currentPrescriptions"
                  className="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"
                  placeholder="Current Prescriptions"
                  value={currentPrescriptions}
                  onChange={(e) => setCurrentPrescriptions(e.target.value)}
                  rows="3"
                />
              </div>
            </>
          )}

          {role === 'consultant' && (
            <>
              <div className="mb-4">
                <label htmlFor="contactInformation" className="block text-gray-700 text-sm font-bold mb-2">
                  Contact Information
                </label>
                <input
                  type="text"
                  id="contactInformation"
                  className="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"
                  placeholder="Contact Information"
                  value={contactInformation}
                  onChange={(e) => setContactInformation(e.target.value)}
                />
              </div>

              <div className="mb-4">
                <label htmlFor="areasOfExpertise" className="block text-gray-700 text-sm font-bold mb-2">
                  Areas of Expertise
                </label>
                <textarea
                  id="areasOfExpertise"
                  className="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"
                  placeholder="Areas of Expertise"
                  value={areasOfExpertise}
                  onChange={(e) => setAreasOfExpertise(e.target.value)}
                  rows="3"
                />
              </div>
            </>
          )}

          <div className="flex items-center justify-between">
            <button
              className="bg-blue-500 hover:bg-blue-700 text-white font-bold py-3 px-6 rounded-full focus:outline-none focus:shadow-outline"
              type="submit"
            >
              Register
            </button>
            <a className="inline-block align-baseline font-bold text-sm text-blue-500 hover:text-blue-800" href="/login">
              Already have an account?
            </a>
          </div>
        </form>
      </div>
    </div>
  );
};

export default Register;

// File: frontend/eslint.config.js
import js from '@eslint/js'
import globals from 'globals'
import reactHooks from 'eslint-plugin-react-hooks'
import reactRefresh from 'eslint-plugin-react-refresh'

export default [
  { ignores: ['dist'] },
  {
    files: ['**/*.{js,jsx}'],
    languageOptions: {
      ecmaVersion: 2020,
      globals: globals.browser,
      parserOptions: {
        ecmaVersion: 'latest',
        ecmaFeatures: { jsx: true },
        sourceType: 'module',
      },
    },
    plugins: {
      'react-hooks': reactHooks,
      'react-refresh': reactRefresh,
    },
    rules: {
      ...js.configs.recommended.rules,
      ...reactHooks.configs.recommended.rules,
      'no-unused-vars': ['error', { varsIgnorePattern: '^[A-Z_]' }],
      'react-refresh/only-export-components': [
        'warn',
        { allowConstantExport: true },
      ],
    },
  },
]

// File: frontend/index.html
<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <link rel="icon" type="image/svg+xml" href="/vite.svg" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Vite + React</title>
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.jsx"></script>
  </body>
</html>

// File: frontend/src/App.css
/* removed css */
// File: frontend/src/App.jsx
import React, { useState, useEffect, useCallback } from 'react';
import { BrowserRouter as Router, Route, Routes, Link, Navigate } from 'react-router-dom';
import Navbar from './components/Navbar';
import Footer from './components/Footer';
import Homepage from './pages/Homepage';
import AboutUs from './pages/AboutUs';
import ContactUs from './pages/ContactUs';
import PrivacyPolicy from './pages/PrivacyPolicy';
import TermsOfService from './pages/TermsOfService';
import NotFound from './pages/NotFound';
import Login from './pages/Login';
import Register from './pages/Register.jsx'; // Corrected import path and extension
import UserProfile from './pages/UserProfile.jsx'; // Corrected import path and extension
import ConsultantProfile from './pages/ConsultantProfile';
import ConsultantSearch from './pages/ConsultantSearch';
import ConsultantDetails from './pages/ConsultantDetails';
import Booking from './pages/Booking';
import ConsultationDashboard from './pages/ConsultationDashboard';
import HealthRecords from './pages/HealthRecords';
import Messaging from './pages/Messaging';
import Payment from './pages/Payment';
import Review from './pages/Review';
import AdminDashboard from './pages/AdminDashboard.jsx'; // Corrected import path and extension
import ConsultantDashboardPage from './pages/ConsultantDashboardPage.jsx'; // Corrected import path and extension
import './App.css';
import './index.css'; //Importing index.css to solve global styling issues

function App() {
    // Use state to manage login status, user role, and consultant status
    const [isLoggedIn, setIsLoggedIn] = useState(false);
    const [userRole, setUserRole] = useState('guest');
    const [isConsultant, setIsConsultant] = useState(() => { // Initialize with boolean
        const storedValue = localStorage.getItem('isConsultant');
        return storedValue === 'true'; // Convert string to boolean
    });
    const [isApproved, setIsApproved] = useState(false);
    const [profilePicture, setProfilePicture] = useState(''); // State to store profile picture

    // Function to update state from localStorage
    const updateStateFromLocalStorage = useCallback(() => {
        setIsLoggedIn(localStorage.getItem('token') !== null);
        setUserRole(localStorage.getItem('userRole') || 'guest');
        setIsConsultant(localStorage.getItem('isConsultant') === 'true');
        setIsApproved(localStorage.getItem('isApproved') === 'true');
    }, []);

    useEffect(() => {
        // Call the function on component mount
        updateStateFromLocalStorage();

        // Set up a listener for localStorage changes
        window.addEventListener('storage', updateStateFromLocalStorage);

        // Clean up the listener when the component unmounts
        return () => {
            window.removeEventListener('storage', updateStateFromLocalStorage);
        };
    }, [updateStateFromLocalStorage]);

    // Callback function to update login state and user info
    const handleLoginSuccess = useCallback((role, isConsultant, isApproved, profilePicture) => {
        setIsLoggedIn(true);
        setUserRole(role);
        setIsConsultant(isConsultant); // Ensure boolean value
        setIsApproved(Boolean(isApproved));   // Ensure boolean value
        setProfilePicture(profilePicture);
    }, []);

    // Callback function to handle logout
    const handleLogout = useCallback(() => {
        localStorage.removeItem('token');
        localStorage.removeItem('userRole');
        localStorage.removeItem('isConsultant');
        localStorage.removeItem('isApproved');
        setIsLoggedIn(false);
        setUserRole('guest');
        setIsConsultant(false);
        setIsApproved(false);
        setProfilePicture(''); // Clear profile picture on logout
    }, []);

    return (
        <Router>
            <Navbar isLoggedIn={isLoggedIn} userRole={userRole} isConsultant={isConsultant} handleLogout={handleLogout} profilePicture={profilePicture} />
            <div className="min-h-screen">
                <Routes>
                    <Route path="/" element={<Homepage />} />
                    <Route path="/aboutus" element={<AboutUs />} />
                    <Route path="/contactus" element={<ContactUs />} />
                    <Route path="/privacypolicy" element={<PrivacyPolicy />} />
                    <Route path="/termsofservice" element={<TermsOfService />} />
                    <Route path="/login" element={<Login setIsLoggedIn={setIsLoggedIn} setUserRole={setUserRole} setIsConsultant={setIsConsultant} setIsApproved={setIsApproved} onLoginSuccess={handleLoginSuccess} setProfilePicture={setProfilePicture} />} />
                    <Route path="/register" element={<Register />} />
                    <Route path="/userprofile" element={<UserProfile setProfilePicture={setProfilePicture} />} />

                    {/* User routes, require login and user role */}
                    {isLoggedIn && userRole === 'user' && (
                        <>
                            <Route path="/consultantsearch" element={<ConsultantSearch />} />
                            <Route path="/consultantdetails/:id" element={<ConsultantDetails />} />
                            <Route path="/booking/:id" element={<Booking />} />
                            <Route path="/consultationdashboard" element={<ConsultationDashboard />} />
                            <Route path="/healthrecords" element={<HealthRecords />} />
                            <Route path="/messaging" element={<Messaging />} />
                            <Route path="/payment" element={<Payment />} />
                            <Route path="/review/:id" element={<Review />} />
                        </>
                    )}

                    {/* Consultant profile and dashboard only accessible if logged in as consultant, and approved*/}
                    {isLoggedIn && userRole === 'consultant' && isApproved ? (
                        <>
                            <Route path="/consultantprofile" element={<ConsultantProfile />} />
                            <Route path="/consultantdashboard" element={<ConsultantDashboardPage />} />
                        </>
                    ) : (isLoggedIn && userRole === 'consultant') ? (
                        <Route path="/consultantprofile" element={<Navigate to="/" />} />
                    ) : null}

                    {/* Admin dashboard route, require login and admin role */}
                    {isLoggedIn && userRole === 'admin' ? (
                        <Route path="/admindashboard" element={<AdminDashboard />} />
                    ) : (
                        // Redirect to login page if not an admin or not logged in
                        <Route path="/admindashboard" element={<Navigate to="/login" />} />
                    )}

                    <Route path="*" element={<NotFound />} />
                </Routes>
            </div>
            <Footer />
        </Router>
    );
}

export default App;
// File: frontend/src/components/Footer.jsx

import { Home, Phone, Mail, Link } from 'lucide-react';
import { Link as RouterLink } from 'react-router-dom';

const Footer = () => {
  return (
    <footer className="bg-gradient-to-r from-blue-200 to-purple-200 py-12 mt-10">
      <div className="max-w-6xl mx-auto text-gray-800">
        <div className="md:flex md:justify-between">
          <div className="mb-6 md:mb-0">
            <h3 className="text-lg font-semibold mb-4">About Us</h3>
            <p className="text-sm">
              Your trusted health consultant platform, connecting you with qualified professionals for personalized advice and care.
            </p>
          </div>

          <div className="mb-6 md:mb-0">
            <h3 className="text-lg font-semibold mb-4">Contact Us</h3>
            <p className="text-sm flex items-center mb-2">
              <Phone className="mr-2 h-4 w-4" />
              +1 (555) 123-4567
            </p>
            <p className="text-sm flex items-center mb-2">
              <Mail className="mr-2 h-4 w-4" />
              info@healthconsultant.com
            </p>
            <p className="text-sm flex items-center">
              <Home className="mr-2 h-4 w-4" />
              123 Health Street, Cityville
            </p>
          </div>

          <div>
            <h3 className="text-lg font-semibold mb-4">Quick Links</h3>
            <ul className="list-none p-0">
              <li className="mb-2">
                <RouterLink to="/" className="text-sm hover:text-blue-600 flex items-center">
                  <Home className="mr-2 h-4 w-4" />
                  Home
                </RouterLink>
              </li>
              <li className="mb-2">
                <RouterLink to="/aboutus" className="text-sm hover:text-blue-600 flex items-center">
                  About Us
                </RouterLink>
              </li>
              <li>
                <RouterLink to="/contactus" className="text-sm hover:text-blue-600 flex items-center">
                  Contact Us
                </RouterLink>
              </li>
            </ul>
          </div>
        </div>

        <div className="mt-8 text-center text-sm">
          <p>&copy; {new Date().getFullYear()} Health Consultant. All rights reserved.</p>
          <p>
            <RouterLink to="/privacypolicy" className="hover:text-blue-600 mr-4">
              Privacy Policy
            </RouterLink>
            <RouterLink to="/termsofservice" className="hover:text-blue-600">
              Terms of Service
            </RouterLink>
          </p>
        </div>
      </div>
    </footer>
  );
};

export default Footer;
// File: frontend/src/components/Navbar.jsx

import { useState } from 'react';
import { Link } from 'react-router-dom';
import { Home, Phone, User, LogOut, Calendar, File, User as Tool } from 'lucide-react';

const Navbar = ({ isLoggedIn, userRole, isConsultant, handleLogout }) => {
    const [isMenuOpen, setIsMenuOpen] = useState(false);
    //const isLoggedIn = localStorage.getItem('token') !== null;

    const toggleMenu = () => {
        setIsMenuOpen(!isMenuOpen);
    };

    return (
        <nav className="bg-gradient-to-r from-blue-200 to-purple-200 shadow-md sticky top-0 z-50">
            <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
                <div className="flex items-center justify-between h-16">
                    <div className="flex items-center">
                        <Link to="/" className="flex-shrink-0">
                            <img
                                className="h-8 w-auto"
                                src="https://placehold.co/40x40"
                                alt="Health Consultant Logo"
                            />
                        </Link>
                        <div className="hidden md:block">
                            <div className="ml-10 flex items-baseline space-x-4">
                                <Link to="/" className="text-gray-600 hover:bg-blue-400 hover:text-white px-3 py-2 rounded-md text-sm font-medium">
                                    <Home className="inline-block h-5 w-5 mr-1" />
                                    Home
                                </Link>
                                <Link to="/aboutus" className="text-gray-600 hover:bg-blue-400 hover:text-white px-3 py-2 rounded-md text-sm font-medium">
                                    About Us
                                </Link>
                                <Link to="/contactus" className="text-gray-600 hover:bg-blue-400 hover:text-white px-3 py-2 rounded-md text-sm font-medium">
                                    <Phone className="inline-block h-5 w-5 mr-1" />
                                    Contact Us
                                </Link>
                                {isLoggedIn && userRole === 'user' && (
                                    <Link to="/consultantsearch" className="text-gray-600 hover:bg-blue-400 hover:text-white px-3 py-2 rounded-md text-sm font-medium">
                                        Find a Consultant
                                    </Link>
                                )}
                                {isLoggedIn && (
                                    <>
                                        {isLoggedIn && userRole === 'user' && (<>
                                        <Link to="/consultationdashboard" className="text-gray-600 hover:bg-blue-400 hover:text-white px-3 py-2 rounded-md text-sm font-medium">
                                            <Calendar className="inline-block h-5 w-5 mr-1" />
                                            My Appointments
                                        </Link>
                                            <Link to="/healthrecords" className="text-gray-600 hover:bg-blue-400 hover:text-white px-3 py-2 rounded-md text-sm font-medium">
                                                <File className="inline-block h-5 w-5 mr-1" />
                                                Health Records
                                            </Link></>
                                        )}
                                        {isLoggedIn && userRole === 'consultant' && (<>
                                            <Link to="/consultantprofile" className="text-gray-600 hover:bg-blue-400 hover:text-white px-3 py-2 rounded-md text-sm font-medium">
                                                <Tool className="inline-block h-5 w-5 mr-1" />
                                                My Profile
                                            </Link>
                                            <Link to="/consultantdashboard" className="text-gray-600 hover:bg-blue-400 hover:text-white px-3 py-2 rounded-md text-sm font-medium">
                                                Consultant Dashboard
                                            </Link>
                                            </>
                                        )}
                                        {isLoggedIn && userRole === 'admin' && ( // Added Admin Dashboard Link
                                            <Link to="/admindashboard" className="text-gray-600 hover:bg-blue-400 hover:text-white px-3 py-2 rounded-md text-sm font-medium">
                                                Admin Dashboard
                                            </Link>
                                        )}
                                    </>
                                )}
                            </div>
                        </div>
                    </div>
                    <div className="hidden md:block">
                        <div className="ml-4 flex items-center md:ml-6">
                            {isLoggedIn ? (
                                <div className="flex items-center space-x-4">
                                    <Link to="/userprofile" className="text-gray-600 hover:bg-blue-400 hover:text-white px-3 py-2 rounded-md text-sm font-medium">
                                        <User className="inline-block h-5 w-5 mr-1" />
                                        Profile
                                    </Link>
                                    <button
                                        onClick={handleLogout}
                                        className="text-gray-600 hover:bg-blue-400 hover:text-white px-3 py-2 rounded-md text-sm font-medium"
                                    >
                                        <LogOut className="inline-block h-5 w-5 mr-1" />
                                        Logout
                                    </button>
                                </div>
                            ) : (
                                <div className="flex items-center space-x-4">
                                    <Link to="/login" className="text-gray-600 hover:bg-blue-400 hover:text-white px-3 py-2 rounded-md text-sm font-medium">
                                        Login
                                    </Link>
                                    <Link to="/register" className="text-gray-600 hover:bg-blue-400 hover:text-white px-3 py-2 rounded-md text-sm font-medium">
                                        Register
                                    </Link>
                                </div>
                            )}
                        </div>
                    </div>
                    <div className="-mr-2 flex md:hidden">
                        <button
                            onClick={toggleMenu}
                            type="button"
                            className="bg-gray-800 inline-flex items-center justify-center p-2 rounded-md text-gray-400 hover:text-white hover:bg-gray-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-offset-gray-800 focus:ring-white"
                            aria-controls="mobile-menu"
                            aria-expanded="false"
                        >
                            <span className="sr-only">Open main menu</span>
                            <svg
                                className={`${isMenuOpen ? 'hidden' : 'block'} h-6 w-6`}
                                xmlns="http://www.w3.org/2000/svg"
                                fill="none"
                                viewBox="0 0 24 24"
                                stroke="currentColor"
                                aria-hidden="true"
                            >
                                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M4 6h16M4 12h16M4 18h16" />
                            </svg>
                            <svg
                                className={`${isMenuOpen ? 'block' : 'hidden'} h-6 w-6`}
                                xmlns="http://www.w3.org/2000/svg"
                                fill="none"
                                viewBox="0 0 24 24"
                                stroke="currentColor"
                                aria-hidden="true"
                            >
                                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M6 18L18 6M6 6l12 12" />
                            </svg>
                        </button>
                    </div>
                </div>
            </div>

            <div className={`${isMenuOpen ? 'block' : 'none'} md:hidden`} id="mobile-menu">
                <div className="px-2 pt-2 pb-3 space-y-1 sm:px-3">
                    <Link to="/" className="text-gray-600 hover:bg-blue-400 hover:text-white block px-3 py-2 rounded-md text-base font-medium">
                        <Home className="inline-block h-5 w-5 mr-1" />
                        Home
                    </Link>
                    <Link to="/aboutus" className="text-gray-600 hover:bg-blue-400 hover:text-white block px-3 py-2 rounded-md text-base font-medium">
                        About Us
                    </Link>
                    <Link to="/contactus" className="text-gray-600 hover:bg-blue-400 hover:text-white block px-3 py-2 rounded-md text-base font-medium">
                        <Phone className="inline-block h-5 w-5 mr-1" />
                        Contact Us
                    </Link>
                    {isLoggedIn && userRole === 'user' && (
                        <Link to="/consultantsearch" className="text-gray-600 hover:bg-blue-400 hover:text-white block px-3 py-2 rounded-md text-base font-medium">
                            Find a Consultant
                        </Link>
                    )}
                    {isLoggedIn && (
                        <>
                            <Link to="/userprofile" className="text-gray-600 hover:bg-blue-400 hover:text-white block px-3 py-2 rounded-md text-base font-medium">
                                <User className="inline-block h-5 w-5 mr-1" />
                                Profile
                            </Link>
                            <Link to="/consultationdashboard" className="text-gray-600 hover:bg-blue-400 hover:text-white block px-3 py-2 rounded-md text-base font-medium">
                                <Calendar className="inline-block h-5 w-5 mr-1" />
                                My Appointments
                            </Link>
                            {isLoggedIn && userRole === 'user' && (
                                <Link to="/healthrecords" className="text-gray-600 hover:bg-blue-400 hover:text-white block px-3 py-2 rounded-md text-base font-medium">
                                    <File className="inline-block h-5 w-5 mr-1" />
                                    Health Records
                                </Link>
                            )}
                            {isLoggedIn && userRole === 'consultant' && (
                                <Link to="/consultantprofile" className="text-gray-600 hover:bg-blue-400 hover:text-white block px-3 py-2 rounded-md text-base font-medium">
                                    <Tool className="inline-block h-5 w-5 mr-1" />
                                    My Profile
                                </Link>
                            )}
                            {isLoggedIn && userRole === 'admin' && ( // Added Admin Dashboard Link
                                <Link to="/admindashboard" className="text-gray-600 hover:bg-blue-400 hover:text-white block px-3 py-2 rounded-md text-base font-medium">
                                    Admin Dashboard
                                </Link>
                            )}
                            {isLoggedIn && userRole === 'consultant' && ( // Added Consultant Dashboard Link
                                <Link to="/consultantdashboard" className="text-gray-600 hover:bg-blue-400 hover:text-white block px-3 py-2 rounded-md text-base font-medium">
                                    Consultant Dashboard
                                </Link>
                            )}
                            <button
                                onClick={handleLogout}
                                className="text-gray-600 hover:bg-blue-400 hover:text-white block px-3 py-2 rounded-md text-base font-medium"
                            >
                                <LogOut className="inline-block h-5 w-5 mr-1" />
                                Logout
                            </button>
                        </>
                    )}
                </div>
            </div>
        </nav>
    );
};

export default Navbar;

// File: frontend/src/components/RegisterForm.jsx
import React, { useState } from 'react';
import {
    TextField,
    Grid,
    FormControl,
    InputLabel,
    Typography,
    Box,
    Switch,
    FormGroup,
    FormControlLabel,
    Select,
    MenuItem,
    Input,
    List,
    ListItem,
    ListItemText,
    Checkbox,
    ListItemSecondaryAction,
    IconButton,
} from '@mui/material';
import { TimePicker } from '@mui/x-date-pickers';
import { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';
import { AdapterDayjs } from '@mui/x-date-pickers/AdapterDayjs';

import dayjs from 'dayjs';
const ITEM_HEIGHT = 48;
const ITEM_PADDING_TOP = 8;
const MenuProps = {
  PaperProps: {
    style: {
      maxHeight: ITEM_HEIGHT * 4.5 + ITEM_PADDING_TOP,
      width: 200,
    },
  },
};

const daysOfWeek = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];

const RegisterForm = ({ formData, setFormData, role }) => {
    const handleInputChange = (e) => {
        setFormData({ ...formData, [e.target.name]: e.target.value });
    };

    const [selectedDays, setSelectedDays] = useState([]);

    const handleDayToggle = (day) => {
        setSelectedDays(prevSelectedDays => {
            if (prevSelectedDays.includes(day)) {
                return prevSelectedDays.filter(d => d !== day);
            } else {
                return [...prevSelectedDays, day];
            }
        });
    };

    const [startTime, setStartTime] = useState(null);
    const [endTime, setEndTime] = useState(null);
    const [useSameTime, setUseSameTime] = useState(false);

    const handleTimeChange = (newTime, setter) => {
        setter(newTime);
    };

    const updateAvailability = () => {
        let availabilityData = {};
        selectedDays.forEach(day => {
            availabilityData[day] = {
                startTime: startTime ? startTime.format('HH:mm') : null,
                endTime: endTime ? endTime.format('HH:mm') : null,
            };
        });
        setFormData({ ...formData, availability: JSON.stringify(availabilityData) });
    };

    const handleUseSameTimeChange = (event) => {
        setUseSameTime(event.target.checked);
    };
    React.useEffect(() => {
        updateAvailability();
    }, [startTime, endTime, selectedDays])

    return (
        <>
            {/* Basic Information */}
            <Grid container spacing={2}>

                {role === 'consultant' && (
                    <>
                        <Grid item xs={12}>
                            <TextField
                                fullWidth
                                label="Bio"
                                name="bio"
                                multiline
                                rows={4}
                                value={formData.bio}
                                onChange={handleInputChange}
                            />
                        </Grid>
                        <Grid item xs={12}>
                            <TextField
                                fullWidth
                                label="Qualification"
                                name="qualification"
                                value={formData.qualification}
                                onChange={handleInputChange}
                            />
                        </Grid>
                        <Grid item xs={12}>
                            <TextField
                                fullWidth
                                label="Areas of Expertise"
                                name="areasOfExpertise"
                                value={formData.areasOfExpertise}
                                onChange={handleInputChange}
                            />
                        </Grid>
                        <Grid item xs={12}>
                            <TextField
                                fullWidth
                                label="Speciality"
                                name="speciality"
                                value={formData.speciality}
                                onChange={handleInputChange}
                            />
                        </Grid>
                        <Grid item xs={12} sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
                                Availability
                            </Grid>
                        <Grid item xs={12}>
                            <LocalizationProvider dateAdapter={AdapterDayjs}>
                                 <TimePicker
                                      label="Start Time"
                                      value={startTime}
                                      onChange={(newTime) => handleTimeChange(newTime, setStartTime)}
                                       ampm={false}
                                       minutesStep={60}
                                       renderInput={(params) => <TextField {...params} fullWidth />}
                                  />
                            </LocalizationProvider>
                        </Grid>
                         <Grid item xs={12}>
                            <LocalizationProvider dateAdapter={AdapterDayjs}>
                                 <TimePicker
                                      label="End Time"
                                      value={endTime}
                                      onChange={(newTime) => handleTimeChange(newTime, setEndTime)}
                                       ampm={false}
                                       minutesStep={60}
                                       renderInput={(params) => <TextField {...params} fullWidth />}
                                  />
                            </LocalizationProvider>
                        </Grid>
                        <Grid item xs={12} >
                             <Typography component="legend">Select Days</Typography>
                            <FormGroup row>
                                {daysOfWeek.map((day) => (
                                    <FormControlLabel
                                        key={day}
                                        control={<Switch checked={selectedDays.includes(day)} onChange={() => handleDayToggle(day)} name={day} />}
                                        label={day}
                                    />
                                ))}
                            </FormGroup>
                        </Grid>
                    </>
                )}
                {role === 'user' && (
                    <>
                        <Grid item xs={12} sm={6}>
                            <TextField
                                fullWidth
                                label="Blood Group"
                                name="bloodGroup"
                                value={formData.bloodGroup}
                                onChange={handleInputChange}
                            />
                        </Grid>
                        <Grid item xs={12}>
                            <TextField
                                fullWidth
                                label="Medical History"
                                name="medicalHistory"
                                multiline
                                rows={4}
                                value={formData.medicalHistory}
                                onChange={handleInputChange}
                            />
                        </Grid>
                        <Grid item xs={12}>
                            <TextField
                                fullWidth
                                label="Current Prescriptions"
                                name="currentPrescriptions"
                                multiline
                                rows={4}
                                value={formData.currentPrescriptions}
                                onChange={handleInputChange}
                            />
                        </Grid>
                    </>
                )}
            </Grid>
        </>
    );
};

export default RegisterForm;
// File: frontend/src/index.css
@import 'tailwindcss';

body {
  margin: 0;
  font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  background-color: #f7f7f7;
  color: #333;
  min-width: 100%; /* Ensure body takes full width */
  overflow-x: hidden; /* Prevent horizontal scroll */
}

html {
    min-width: 100%;
    overflow-x: hidden;
}

#root {
  min-width: 100%;
}
// File: frontend/src/main.jsx
import { StrictMode } from 'react'
import { createRoot } from 'react-dom/client'
import './index.css'
import App from './App.jsx'

createRoot(document.getElementById('root')).render(
  <StrictMode>
    <App />
  </StrictMode>,
)

// File: frontend/src/pages/AboutUs.jsx
import React from 'react';

const AboutUs = () => {
  return (
    <div className="min-h-screen bg-gray-100 p-10">
      {/* Company Overview */}
      <section className="max-w-4xl mx-auto bg-white rounded-2xl shadow-xl p-8 mb-12">
        <h2 className="text-3xl font-semibold text-gray-800 text-center mb-6">
          Our Mission
        </h2>
        <p className="text-gray-700 leading-relaxed text-lg">
          At Health Consultant, our mission is to connect individuals with the
          best healthcare professionals, providing personalized and accessible
          health advice. We believe in empowering our users to take control of
          their health journey with reliable and expert guidance.
        </p>
      </section>

      {/* Team Section */}
      <section className="max-w-6xl mx-auto">
        <h2 className="text-3xl font-semibold text-gray-800 text-center mb-8">
          Meet Our Team
        </h2>
        <div className="grid grid-cols-1 md:grid-cols-3 gap-8">
          {/* Team Member 1 */}
          <div className="bg-white rounded-2xl shadow-md p-6 hover:shadow-lg transition-shadow duration-300">
            <img
              className="rounded-full w-32 h-32 mx-auto mb-4"
              src="https://placehold.co/128x128"
              alt="Team Member"
            />
            <h3 className="text-xl font-semibold text-gray-700 text-center mb-2">
              Dr. Emily Carter
            </h3>
            <p className="text-gray-600 text-center">
              CEO &amp; Founder
            </p>
            <p className="text-gray-600 text-center mt-2">
              "Passionate about improving healthcare access for everyone."
            </p>
          </div>

          {/* Team Member 2 */}
          <div className="bg-white rounded-2xl shadow-md p-6 hover:shadow-lg transition-shadow duration-300">
            <img
              className="rounded-full w-32 h-32 mx-auto mb-4"
              src="https://placehold.co/128x128"
              alt="Team Member"
            />
            <h3 className="text-xl font-semibold text-gray-700 text-center mb-2">
              Dr. David Miller
            </h3>
            <p className="text-gray-600 text-center">
              Chief Medical Officer
            </p>
            <p className="text-gray-600 text-center mt-2">
              "Committed to providing the highest quality medical advice."
            </p>
          </div>

          {/* Team Member 3 */}
          <div className="bg-white rounded-2xl shadow-md p-6 hover:shadow-lg transition-shadow duration-300">
            <img
              className="rounded-full w-32 h-32 mx-auto mb-4"
              src="https://placehold.co/128x128"
              alt="Team Member"
            />
            <h3 className="text-xl font-semibold text-gray-700 text-center mb-2">
              Sarah Johnson
            </h3>
            <p className="text-gray-600 text-center">
              Head of User Experience
            </p>
            <p className="text-gray-600 text-center mt-2">
              "Dedicated to creating a user-friendly and seamless platform."
            </p>
          </div>
        </div>
      </section>
    </div>
  );
};

export default AboutUs;
// File: frontend/src/pages/AdminDashboard.jsx

import React, { useState, useEffect } from 'react';
import { getAdminUsers, getAdminConsultants, getAdminBookings, acceptBooking, approveConsultant } from '../utils/api';
import { User, Calendar as CalendarIcon, User as Tool, CheckCircle } from 'lucide-react';

const AdminDashboard = () => {
  const [users, setUsers] = useState([]);
  const [consultants, setConsultants] = useState([]);
  const [bookings, setBookings] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState('');

  useEffect(() => {
    const fetchData = async () => {
      setLoading(true);
      setError('');

      try {
        const token = localStorage.getItem('token');
        if (!token) {
          setError('Authentication required. Please login as an admin.');
          return;
        }

        const usersData = await getAdminUsers(token);
        setUsers(usersData);

        const consultantsData = await getAdminConsultants(token);
        setConsultants(consultantsData);

        const bookingsData = await getAdminBookings(token);
        setBookings(bookingsData);

      } catch (err) {
        setError('Failed to retrieve data. Please ensure you are logged in as admin and try again.');
        console.error('Failed to fetch admin data:', err);
      } finally {
        setLoading(false);
      }
    };

    fetchData();
  }, []);

  const handleAcceptBooking = async (bookingId) => {
    try {
      const token = localStorage.getItem('token');
      if (!token) {
        setError('Authentication required. Please login as an admin.');
        return;
      }

      await acceptBooking(token, bookingId);

      // Update the bookings state to reflect the accepted booking
      setBookings(bookings.map(booking =>
        booking.id === bookingId ? { ...booking, status: 'accepted' } : booking
      ));
    } catch (err) {
      setError('Failed to accept booking. Please try again.');
      console.error('Failed to accept booking:', err);
    }
  };

  const handleApproveConsultant = async (userId) => {
    try {
      const token = localStorage.getItem('token');
      if (!token) {
        setError('Authentication required. Please login as an admin.');
        return;
      }

      await approveConsultant(token, userId);

      // Update the users state to reflect the approved consultant
      setUsers(users.map(user =>
        user.id === userId ? { ...user, isApproved: 1 } : user
      ));

      // Update the consultants state to reflect the approval (if needed)
      setConsultants(consultants.map(consultant =>
        consultant.userId === userId ? { ...consultant, isApproved: 1 } : consultant
      ));

    } catch (err) {
      setError('Failed to approve consultant. Please try again.');
      console.error('Failed to approve consultant:', err);
    }
  };

  return (
    <div className="min-h-screen bg-gray-100 p-10">
      <section className="max-w-6xl mx-auto">
        <h2 className="text-3xl font-semibold text-gray-800 text-center mb-8">
          Admin Dashboard
        </h2>

        {loading && <p className="text-center">Loading data...</p>}
        {error && <p className="text-center text-red-500">{error}</p>}

        {!loading && !error && (
          <>
            {/* User Management */}
            <div className="bg-white rounded-2xl shadow-xl p-6 mb-8">
              <h3 className="text-2xl font-semibold text-gray-800 mb-4">
                User Management
              </h3>
              <div className="overflow-x-auto">
                <table className="min-w-full leading-normal">
                  <thead>
                    <tr className="bg-gray-100 font-semibold">
                      <th className="px-5 py-3 border-b-2 border-gray-200 text-left text-xs uppercase">
                        <User className="inline-block h-4 w-4 mr-1" />
                        ID
                      </th>
                      <th className="px-5 py-3 border-b-2 border-gray-200 text-left text-xs uppercase">
                        Full Name
                      </th>
                      <th className="px-5 py-3 border-b-2 border-gray-200 text-left text-xs uppercase">
                        Email
                      </th>
                      <th className="px-5 py-3 border-b-2 border-gray-200 text-left text-xs uppercase">
                        Role
                      </th>
                      <th className="px-5 py-3 border-b-2 border-gray-200 text-left text-xs uppercase">
                        isConsultant
                      </th>
                      <th className="px-5 py-3 border-b-2 border-gray-200 text-left text-xs uppercase">
                        isApproved
                      </th>
                      <th className="px-5 py-3 border-b-2 border-gray-200 text-left text-xs uppercase">
                        Actions
                      </th>
                    </tr>
                  </thead>
                  <tbody>
                    {users.map((user) => (
                      <tr key={user.id}>
                        <td className="px-5 py-3 border-b border-gray-200 text-sm">{user.id}</td>
                        <td className="px-5 py-3 border-b border-gray-200 text-sm">{user.fullName}</td>
                        <td className="px-5 py-3 border-b border-gray-200 text-sm">{user.email}</td>
                        <td className="px-5 py-3 border-b border-gray-200 text-sm">{user.role}</td>
                        <td className="px-5 py-3 border-b border-gray-200 text-sm">{user.isConsultant ? 'Yes' : 'No'}</td>
                        <td className="px-5 py-3 border-b border-gray-200 text-sm">{user.isApproved ? 'Yes' : 'No'}</td>
                        <td className="px-5 py-3 border-b border-gray-200 text-sm">
                          {user.isConsultant && !user.isApproved && (
                            <button
                              className="bg-green-500 hover:bg-green-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline"
                              onClick={() => handleApproveConsultant(user.id)}
                            >
                              Approve
                            </button>
                          )}
                          {user.isApproved ? <CheckCircle className="inline-block h-5 w-5 text-green-500" /> : null}
                        </td>
                      </tr>
                    ))}
                  </tbody>
                </table>
              </div>
            </div>

            {/* Consultant Management */}
            <div className="bg-white rounded-2xl shadow-xl p-6 mb-8">
              <h3 className="text-2xl font-semibold text-gray-800 mb-4">
                Consultant Management
              </h3>
              <div className="overflow-x-auto">
                <table className="min-w-full leading-normal">
                  <thead>
                    <tr className="bg-gray-100 font-semibold">
                      <th className="px-5 py-3 border-b-2 border-gray-200 text-left text-xs uppercase">
                        <Tool className="inline-block h-4 w-4 mr-1" />
                        ID
                      </th>
                      <th className="px-5 py-3 border-b-2 border-gray-200 text-left text-xs uppercase">
                        Specialty
                      </th>
                      <th className="px-5 py-3 border-b-2 border-gray-200 text-left text-xs uppercase">
                        Qualifications
                      </th>
                      <th className="px-5 py-3 border-b-2 border-gray-200 text-left text-xs uppercase">
                        Availability
                      </th>
                    </tr>
                  </thead>
                  <tbody>
                    {consultants.map((consultant) => (
                      <tr key={consultant.id}>
                        <td className="px-5 py-3 border-b border-gray-200 text-sm">{consultant.id}</td>
                        <td className="px-5 py-3 border-b border-gray-200 text-sm">{consultant.specialty}</td>
                        <td className="px-5 py-3 border-b border-gray-200 text-sm">{consultant.qualifications}</td>
                        <td className="px-5 py-3 border-b border-gray-200 text-sm">{consultant.availability}</td>
                      </tr>
                    ))}
                  </tbody>
                </table>
              </div>
            </div>

            {/* Consultation Monitoring */}
            <div className="bg-white rounded-2xl shadow-xl p-6">
              <h3 className="text-2xl font-semibold text-gray-800 mb-4">
                Consultation Monitoring
              </h3>
              <div className="overflow-x-auto">
                <table className="min-w-full leading-normal">
                  <thead>
                    <tr className="bg-gray-100 font-semibold">
                      <th className="px-5 py-3 border-b-2 border-gray-200 text-left text-xs uppercase">
                        <CalendarIcon className="inline-block h-4 w-4 mr-1" />
                        ID
                      </th>
                      <th className="px-5 py-3 border-b-2 border-gray-200 text-left text-xs uppercase">
                        User ID
                      </th>
                      <th className="px-5 py-3 border-b-2 border-gray-200 text-left text-xs uppercase">
                        Consultant ID
                      </th>
                      <th className="px-5 py-3 border-b-2 border-gray-200 text-left text-xs uppercase">
                        Date
                      </th>
                      <th className="px-5 py-3 border-b-2 border-gray-200 text-left text-xs uppercase">
                        Time
                      </th>
                      <th className="px-5 py-3 border-b-2 border-gray-200 text-left text-xs uppercase">
                        Status
                      </th>
                      <th className="px-5 py-3 border-b-2 border-gray-200 text-left text-xs uppercase">
                        Actions
                      </th>
                    </tr>
                  </thead>
                  <tbody>
                    {bookings.map((booking) => (
                      <tr key={booking.id}>
                        <td className="px-5 py-3 border-b border-gray-200 text-sm">{booking.id}</td>
                        <td className="px-5 py-3 border-b border-gray-200 text-sm">{booking.userId}</td>
                        <td className="px-5 py-3 border-b border-gray-200 text-sm">{booking.consultantId}</td>
                        <td className="px-5 py-3 border-b border-gray-200 text-sm">{booking.date}</td>
                        <td className="px-5 py-3 border-b border-gray-200 text-sm">{booking.time}</td>
                        <td className="px-5 py-3 border-b border-gray-200 text-sm">{booking.status}</td>
                        <td className="px-5 py-3 border-b border-gray-200 text-sm">
                          {booking.status === 'pending' && (
                            <button
                              className="bg-green-500 hover:bg-green-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline"
                              onClick={() => handleAcceptBooking(booking.id)}
                            >
                              Accept
                            </button>
                          )}
                        </td>
                      </tr>
                    ))}
                  </tbody>
                </table>
              </div>
            </div>
          </>
        )}
      </section>
    </div>
  );
};

export default AdminDashboard;





// File: frontend/src/pages/Booking.jsx
import React, { useState, useEffect } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import { getConsultantById, createBooking, getConsultantBookingsById } from '../utils/api';
import {
    Container,
    Typography,
    Grid,
    TextField,
    Button,
    FormControl,
    InputLabel,
    Select,
    MenuItem,
    Alert,
    CircularProgress,
} from '@mui/material';
import dayjs from 'dayjs';
import 'dayjs/locale/en'; // Import the locale

const Booking = () => {
    const { id } = useParams();
    const [consultant, setConsultant] = useState(null);
    const [selectedDate, setSelectedDate] = useState(dayjs());
    const [time, setTime] = useState('');
    const [paymentInfo, setPaymentInfo] = useState('');
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState('');
    const [bookingSuccess, setBookingSuccess] = useState(false);
    const navigate = useNavigate();

    const [availableTimes, setAvailableTimes] = useState({}); // dynamic times
    const [bookings, setBookings] = useState([]);
    const [isTimeSlotAvailable, setIsTimeSlotAvailable] = useState(true);

    const handleAcceptBooking = async (bookingId) => {
        try {
            const token = localStorage.getItem('token');
            if (!token) {
                setError("Authentication required. Please login as an admin.");
                return;
            }

            // await acceptBooking(token, bookingId);

            // Update the bookings state to reflect the accepted booking
            setBookings(
                bookings.map((booking) =>
                    booking.id === bookingId
                        ? { ...booking, status: "accepted" }
                        : booking
                )
            );
        } catch (err) {
            setError("Failed to accept booking. Please try again.");
            console.error("Failed to accept booking:", err);
        }
    };

    const isTimeSlotBooked = (date, time) => {
        return bookings.some(
            (booking) => booking.date === date && booking.time === time
        );
    };

    useEffect(() => {
        const fetchConsultant = async () => {
            setLoading(true);
            setError('');
            try {
                const data = await getConsultantById(id);
                setConsultant(data);
            } catch (err) {
                setError('Failed to retrieve consultant details. Please try again.');
                setConsultant(null);
                console.error('Failed to fetch consultant:', err);
            } finally {
                setLoading(false);
            }
        };
        fetchConsultant();
    }, [id]);

    useEffect(() => {
      const fetchConsultantAvailability = async () => {
          try {
              const token = localStorage.getItem('token');
              const data = await getConsultantBookingsById(token, id);
              setBookings(data);
  
              const response = await fetch(
                  `http://localhost:5555/api/consultant/${id}/availability`,
                  {
                      method: "GET",
                      headers: {
                          "Content-Type": "application/json",
                      },
                  }
              );
              if (!response.ok) {
                  throw new Error(`HTTP error! Status: ${response.status}`);
              }
              const data_available = await response.json();
              setAvailableTimes(data_available);
              console.log("Available Times:", data_available);  // CHECKPOINT
          } catch (parseError) {
              setError("Failed to load data from the server");
              console.error(parseError);
          }
      };
      fetchConsultantAvailability();
  }, [id, selectedDate]);

    const handleSubmit = async (e) => {
        e.preventDefault();
        setLoading(true);
        setError('');
        setBookingSuccess(false);

        try {
            const token = localStorage.getItem('token');
            if (!token) {
                setError('Authentication required. Please login.');
                return;
            }

            await createBooking(token, id, selectedDate.format('YYYY-MM-DD'), time);
            setBookingSuccess(true);
            setTimeout(() => {
                navigate('/consultationdashboard');
            }, 2000);
        } catch (err) {
            setError('Failed to create booking. Please try again.');
            console.error('Booking creation failed:', err);
        } finally {
            setLoading(false);
        }
    };
    const handleDateChange = (date) => {
        setSelectedDate(date);
        setIsTimeSlotAvailable(true); // Reset the availability check when date changes
    };

    const generateTimeSlots = () => {
      if (!consultant || !availableTimes) return [];
  
      const bookingDay = selectedDate.format('dddd'); // Get full day name (e.g., "Monday")
      console.log("Booking Day:", bookingDay);
  
      if (!availableTimes[bookingDay]) {
          console.log("No availability for this day.");
          return [];
      }
  
      const { startTime, endTime } = availableTimes[bookingDay];
      if (!startTime || !endTime) {
          console.log("Invalid time range.");
          return [];
      }
  
      // Create proper dayjs objects with date and time
      const start = dayjs(`${selectedDate.format('YYYY-MM-DD')} ${startTime}`, "YYYY-MM-DD HH:mm");
      const end = dayjs(`${selectedDate.format('YYYY-MM-DD')} ${endTime}`, "YYYY-MM-DD HH:mm");
  
      if (!start.isValid() || !end.isValid()) {
          console.log("Invalid dayjs objects for time parsing.");
          return [];
      }
  
      let currentTime = start;
      const timeSlots = [];
  
      while (currentTime.isBefore(end)) {
          const slotStart = currentTime.format('HH:mm');
          currentTime = currentTime.add(1, 'hour'); // Increment by 1 hour
          const slotEnd = currentTime.format('HH:mm');
  
          if (currentTime.isAfter(end)) break; // Prevent adding a slot that exceeds the end time
  
          timeSlots.push(`${slotStart}-${slotEnd}`);
      }
  
      console.log("Generated Time Slots:", timeSlots);
      return timeSlots;
  };
  

    if (loading) {
        return (
            <Container sx={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: '100vh' }}>
                <CircularProgress />
            </Container>
        );
    }

    if (error) {
        return (
            <Container>
                <Alert severity="error">{error}</Alert>
            </Container>
        );
    }

    if (!consultant) {
        return (
            <Container>
                <Alert severity="error">Consultant not found.</Alert>
            </Container>
        );
    }

    return (
        <Container maxWidth="md" sx={{ mt: 4 }}>
            <Typography variant="h4" component="h1" gutterBottom>
                Book Appointment with Dr. {consultant.speciality}
            </Typography>

            <form onSubmit={handleSubmit}>
                <Grid container spacing={3}>
                    <Grid item xs={12}>
                        <TextField
                            label="Selected Date"
                            type="date"
                            value={selectedDate.format('YYYY-MM-DD')}
                            onChange={(e) => handleDateChange(dayjs(e.target.value))}
                            fullWidth
                            InputLabelProps={{
                                shrink: true,
                            }}
                        />
                    </Grid>
                    <Grid item xs={12}>
                        <FormControl fullWidth>
                            <InputLabel id="time-select-label">Select Time Slot</InputLabel>
                            <Select
                                labelId="time-select-label"
                                id="time"
                                value={time}
                                label="Select Time Slot"
                                onChange={(e) => setTime(e.target.value)}
                                required
                            >
                                {generateTimeSlots().map((slot) => (
                                        <MenuItem key={slot} value={slot}>
                                            {slot}
                                        </MenuItem>
                                    ))}
                            </Select>
                            {!isTimeSlotAvailable && (
                                <Alert severity="error">This time slot is already booked. Please select another time.</Alert>
                            )}

                        </FormControl>
                    </Grid>
                    <Grid item xs={12}>
                        <TextField
                            label="Payment Information"
                            placeholder="Enter Credit Card Number"
                            fullWidth
                            required
                            value={paymentInfo}
                            onChange={(e) => setPaymentInfo(e.target.value)}
                        />
                    </Grid>
                    <Grid item xs={12}>
                        <Button type="submit" variant="contained" color="primary" fullWidth>
                            Confirm Booking
                        </Button>
                    </Grid>
                </Grid>
            </form>

            {bookingSuccess && (
                <Alert severity="success" sx={{ mt: 3 }}>
                    Booking created successfully! Redirecting to dashboard...
                </Alert>
            )}
        </Container>
    );
};

export default Booking;
// File: frontend/src/pages/ConsultantDashboardPage.jsx
import React, { useState, useEffect } from "react";
import {
  getConsultantBookingsById,
  acceptBooking,
  rejectBooking,
  cancelBooking,
  get_details,
} from "../utils/api"; // Import the missing function
import { Calendar } from "lucide-react";
import { Navigate } from "react-router-dom";

const ConsultantDashboardPage = () => {
  const [bookings, setBookings] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState("");
  const [details, setDetails] = useState(null);
  const [consultantId, setConsultantId] = useState(null); // Ensure it's null initially
  const [isApproved, setIsApproved] = useState(false);

  const handleAcceptBooking = async (bookingId) => {
    try {
      const token = localStorage.getItem("token");
      if (!token) {
        setError("Authentication required. Please login as an admin.");
        return;
      }

      await acceptBooking(token, bookingId);

      // Update the bookings state to reflect the accepted booking
      setBookings(
        bookings.map((booking) =>
          booking.id === bookingId
            ? { ...booking, status: "accepted" }
            : booking
        )
      );
    } catch (err) {
      setError("Failed to accept booking. Please try again.");
      console.error("Failed to accept booking:", err);
    }
  };
  const getDetails = async (bookingId) => {
    try {
      const token = localStorage.getItem("token");
      if (!token) {
        setError("Authentication required. Please login as an admin.");
        return;
      }

      const data = await get_details(token, bookingId);
      console.log(data);
      setDetails(data);
      // Update the bookings state to reflect the accepted booking
      // setBookings(bookings.map(booking =>
      //     booking.id === bookingId ? { ...booking, status: 'accepted' } : booking
      // ));
    } catch (err) {
      setError("Can't click");
      console.error("Failed to accept booking:", err);
    }
  };

  const handleRejectBooking = async (bookingId) => {
    try {
      const token = localStorage.getItem("token");
      if (!token) {
        setError("Authentication required. Please login as an admin.");
        return;
      }

      await rejectBooking(token, bookingId);

      // Update the bookings state to reflect the accepted booking
      setBookings(
        bookings.map((booking) =>
          booking.id === bookingId
            ? { ...booking, status: "rejected" }
            : booking
        )
      );
    } catch (err) {
      setError("Failed to accept booking. Please try again.");
      console.error("Failed to accept booking:", err);
    }
  };

  const handleCancelBooking = async (bookingId, bookingdate) => {
    try {
      const token = localStorage.getItem("token");
      if (!token) {
        setError("Authentication required. Please login as an admin.");
        return;
      }

      const bookingDate = new Date(bookingdate); // Assuming booking.date is a valid date string
      const today = new Date();

      // Reset the time portion of both dates to midnight
      bookingDate.setHours(0, 0, 0, 0);
      today.setHours(0, 0, 0, 0);

      if (bookingDate < today) {
        console.log("Booking date is in the past.");
      } else {
        console.log("Booking date is in the future.");
        await cancelBooking(token, bookingId);
        // Update the bookings state to reflect the accepted booking
        setBookings(
          bookings.map((booking) =>
            booking.id === bookingId
              ? { ...booking, status: "canceled" }
              : booking
          )
        );
      }
    } catch (err) {
      setError("Failed to accept booking. Please try again.");
      console.error("Failed to accept booking:", err);
    }
  };

  useEffect(() => {
    // Function to fetch bookings
    console.log(localStorage.getItem("isConsultant"))
    const fetchBookings = async () => {
      setLoading(true);
      setError("");
      try {
        const token = localStorage.getItem("token");
        const storedConsultantId = localStorage.getItem("userId");
        const storedIsApproved = localStorage.getItem("isApproved");

        if (!token) {
          setError("Authentication required. Please login.");
          return;
        }

        // Check if storedConsultantId exists and is a valid number
        if (!storedConsultantId || isNaN(parseInt(storedConsultantId, 10))) {
          setError("Consultant ID not found or invalid. Please login again.");
          return;
        }

        // Convert storedConsultantId to a number
        const parsedConsultantId = parseInt(storedConsultantId, 10);
        setConsultantId(parsedConsultantId); // Set the consultantId state

        // Set isApproved state
        setIsApproved(storedIsApproved === "true");

        const data = await getConsultantBookingsById(token, parsedConsultantId);
        setBookings(data);
      } catch (err) {
        setError("Failed to retrieve bookings. Please try again.");
        console.error("Failed to fetch bookings:", err);
      } finally {
        setLoading(false);
      }
    };

    // Call fetchBookings only if consultantId is valid
    if (
      localStorage.getItem("isConsultant") === "true" &&
      localStorage.getItem("userId")
    ) {
      fetchBookings();
    } else {
      setError("You must be logged in as Consultant to access this page");
    }
  }, []);

  // Redirect if consultant is not approved
  // if (
  //   localStorage.getItem("isConsultant") === "true" &&
  //   localStorage.getItem("isApproved") === "false"
  // ) {
  //   return <Navigate to="/" />;
  // }

  return (
    <div className="min-h-screen bg-gray-100 p-10">
      {details && (
        <div
          className="absolute top-0 bottom-0 left-0 right-0 flex justify-center items-center min-w-screen"
          style={{ backgroundColor: "rgba(0,0,0,0.5)" }}
          onClick={() => setDetails(null)}
        >
          <div className="rounded-lg bg-gradient-to-r from-blue-500 via-teal-400 to-green-300 p-1">
            <div className="flex justify-center items-center">
              <div className="max-w-6xl bg-white rounded-lg shadow-2xl p-8 space-y-6 transform transition-all hover:shadow-xl w-[40vw]">
                {/* Profile Section */}
                <div className="flex items-center space-x-6">
                  <img
                    src={
                      details.user.profilePicture ||
                      "https://via.placeholder.com/150"
                    }
                    alt="Profile Picture"
                    className="w-24 h-24 rounded-full object-cover shadow-md"
                  />
                  <div>
                    <h2 className="text-3xl font-semibold text-gray-800">
                      {details.user.fullName}
                    </h2>
                    <p className="text-sm text-gray-500">
                      {details.user.email}
                      <br />
                      {details.user.phone}
                    </p>
                    <p className="text-sm text-gray-600">
                      Blood Group:{" "}
                      <span className="font-bold">
                        {details.user.bloodGroup}
                      </span>
                    </p>
                  </div>
                </div>
                {/* Current Prescriptions Section */}
                <div>
                  <h3 className="text-2xl font-semibold text-gray-700">
                    Current Prescriptions
                  </h3>
                  <p className="text-gray-600">
                    {details.user.currentPrescriptions}
                  </p>
                </div>

                {/* Medical History Section */}
                <div className="space-y-4">
                  <h3 className="text-2xl font-semibold text-gray-700">
                    Medical History
                  </h3>
                  <p className="text-gray-600">{details.user.medicalHistory}</p>
                </div>

                {/* Health Records Section */}
                <div className="space-y-4">
                  <h3 className="text-2xl font-semibold text-gray-700">
                    Health Records
                  </h3>
                  {/* Check if healthRecords exist */}
                  {details.healthRecords && details.healthRecords.length > 0 ? (
                    <div className="space-y-6 overflow-auto h-[250px]">
                      {/* Loop through each health record */}
                      {details.healthRecords.map((record, index) => (
                        <div
                          key={index}
                          className="bg-gray-50 p-4 rounded-lg shadow-md"
                        >
                          <h4 className="text-lg font-medium text-gray-600">
                            Medical History
                          </h4>
                          <p className="text-gray-500">
                            {record.medicalHistory ||
                              "No medical history available"}
                          </p>

                          <div className="mt-4 grid grid-cols-1 sm:grid-cols-2 gap-4">
                            <div>
                              <h4 className="text-lg font-medium text-gray-600">
                                Ongoing Treatments
                              </h4>
                              <p className="text-gray-500">
                                {record.ongoingTreatments ||
                                  "No ongoing treatments"}
                              </p>
                            </div>

                            <div>
                              <h4 className="text-lg font-medium text-gray-600">
                                Prescriptions
                              </h4>
                              <p className="text-gray-500">
                                {record.prescriptions ||
                                  "No current prescriptions"}
                              </p>
                            </div>
                          </div>
                        </div>
                      ))}
                    </div>
                  ) : (
                    <p className="text-gray-500">
                      No health records available.
                    </p>
                  )}
                </div>

                {/* Health Medical History Section
            <div>
              <h3 className="text-2xl font-semibold text-gray-700">
                Health Medical History
              </h3>
              <p className="text-gray-600">{details.user.medicalHistory}</p>
            </div> */}
              </div>
            </div>
          </div>
        </div>
      )}

      <section className="max-w-4xl mx-auto bg-white rounded-2xl shadow-xl p-8">
        <h2 className="text-3xl font-semibold text-gray-800 text-center mb-6">
          Consultant Dashboard
        </h2>
        {loading && <p className="text-center">Loading bookings...</p>}
        {error && <p className="text-center text-red-500">{error}</p>}
        {!loading && !error && bookings.length === 0 && (
          <p className="text-center">No bookings found.</p>
        )}
        {!loading && !error && bookings.length > 0 && (
          <ul className="divide-y divide-gray-200">
            {bookings.map((booking) => (
              <li key={booking.id} className="py-4">
                <div className="flex items-center justify-between">
                  <div>
                    <p className="text-lg font-semibold text-gray-700">
                      <Calendar className="inline-block h-5 w-5 mr-1" />
                      {new Date(booking.date).toLocaleDateString()}
                    </p>
                    <p className="text-gray-600">Time: {booking.time}</p>
                    <p className="text-gray-600">Status: {booking.status}</p>
                  </div>
                  {booking.status === "pending" && (
                    <div className="flex justify-between w-[200px]">
                      <button
                        className="bg-green-500 hover:bg-green-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline cursor-pointer"
                        onClick={() => handleAcceptBooking(booking.id)}
                      >
                        Accept
                      </button>
                      <button
                        className="bg-red-600 hover:bg-red-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline cursor-pointer"
                        onClick={() => handleRejectBooking(booking.id)}
                      >
                        Reject
                      </button>
                    </div>
                  )}
                  {booking.status === "accepted" && (
                    <div className="flex justify-between">
                      <button
                        className="bg-red-600 hover:bg-red-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline cursor-pointer"
                        onClick={() =>
                          handleCancelBooking(booking.id, booking.date)
                        }
                      >
                        Cancel
                      </button>
                    </div>
                  )}
                  <button
                    className="bg-blue-600 text-white font-bold py-2 px-4 rounded hover:bg-blue-700 cursor-pointer"
                    onClick={() => getDetails(booking.id)}
                  >
                    view
                  </button>
                </div>
              </li>
            ))}
          </ul>
        )}
      </section>
    </div>
  );
};

export default ConsultantDashboardPage;

// File: frontend/src/pages/ConsultantDetails.jsx
import React, { useState, useEffect } from 'react';
import { useParams, Link } from 'react-router-dom';
import { getConsultantById } from '../utils/api';
import {
    Container,
    Typography,
    Grid,
    Card,
    CardContent,
    CardMedia,
    Box,
    Chip,
    Avatar,
    CircularProgress,
    Alert,
    Button,
} from '@mui/material';
import { AccessTime, LocationOn, VerifiedUser } from '@mui/icons-material';
import { styled } from '@mui/system';

const StyledCard = styled(Card)(({ theme }) => ({
    borderRadius: theme.spacing(2),
    // boxShadow: theme.shadows[5],
    transition: 'transform 0.3s ease-in-out',
    '&:hover': {
        transform: 'scale(1.03)',
    },
}));

const ConsultantDetails = () => {
    const { id } = useParams();
    const [consultant, setConsultant] = useState(null);
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState('');

    useEffect(() => {
        const fetchConsultant = async () => {
            setLoading(true);
            setError('');
            try {
                const data = await getConsultantById(id);
                setConsultant(data);
            } catch (err) {
                setError('Failed to retrieve consultant details. Please try again.');
                setConsultant(null);
                console.error('Failed to fetch consultant:', err);
            } finally {
                setLoading(false);
            }
        };

        fetchConsultant();
    }, [id]);

    if (loading) {
        return (
            <Container sx={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: '80vh' }}>
                <CircularProgress />
            </Container>
        );
    }

    if (error) {
        return (
            <Container>
                <Alert severity="error">{error}</Alert>
            </Container>
        );
    }

    if (!consultant) {
        return (
            <Container>
                <Alert severity="error">Consultant not found.</Alert>
            </Container>
        );
    }

    const parseAvailability = (availability) => {
        try {
            return JSON.parse(availability);
        } catch (e) {
            console.error("Failed to parse availability:", availability);
            return {};
        }
    };

    return (
      
        <Container maxWidth="md" sx={{ mt: 5, mb: 4 }}>
            <StyledCard>
                <CardMedia
                    component="img"
                    height="300"
                    image={consultant.profilePicture || "https://placehold.co/600x400"}
                    alt={consultant.fullName}
                    sx={{ objectFit: 'cover' }}
                />
                <CardContent>
                    <Grid container spacing={3} alignItems="center">
                        <Grid item xs={12} md={8}>
                            <Typography variant="h5" component="h2" gutterBottom>
                                {consultant.fullName}
                            </Typography>
                            <Typography variant="subtitle1" color="textSecondary">
                                <Chip avatar={<VerifiedUser />} label={consultant.speciality} size="small" />
                            </Typography>
                        </Grid>
                        <Grid item xs={12} md={4} sx={{ textAlign: 'right' }}>
                            <Button
                                component={Link}
                                to={`/booking/${consultant.id}`}
                                variant="contained"
                                color="primary"
                                size="large"
                            >
                                Book Appointment
                            </Button>
                        </Grid>
                        <Grid item xs={12}>
                            <Typography variant="h6">About</Typography>
                            <Typography variant="body2" paragraph>
                                {consultant.bio}
                            </Typography>
                        </Grid>
                        <Grid item xs={12} md={6}>
                            <Typography variant="subtitle2">Qualifications</Typography>
                            <Typography variant="body2">{consultant.qualification}</Typography>
                        </Grid>
                        <Grid item xs={12} md={6}>
                            <Typography variant="subtitle2">Areas of Expertise</Typography>
                            <Typography variant="body2">{consultant.areasOfExpertise}</Typography>
                        </Grid>
                        <Grid item xs={12}>
                            <Typography variant="h6">Availability</Typography>
                            <Box sx={{ mt: 1 }}>
                                {consultant.availability ? Object.entries(parseAvailability(consultant.availability)).map(([day, { startTime, endTime }]) => (
                                    <Box key={day} sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between', mb: 1 }}>
                                        <Typography variant="body2" sx={{ fontWeight: 'bold' }}>{day}:</Typography>
                                        <Box sx={{ display: 'flex', alignItems: 'center' }}>
                                            <AccessTime sx={{ mr: 0.5 }} fontSize="small" />
                                            <Typography variant="body2">{startTime} - {endTime}</Typography>
                                        </Box>
                                    </Box>
                                )) : <Typography>Not available at the moment</Typography>}
                            </Box>
                        </Grid>
                    </Grid>
                </CardContent>
            </StyledCard>
        </Container>
    );
};

export default ConsultantDetails;
// File: frontend/src/pages/ConsultantProfile.jsx
import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import { getConsultantProfile, updateConsultantProfile } from '../utils/api';
import { Edit, User, Calendar } from 'lucide-react';

const ConsultantProfile = () => {
  const [specialty, setSpecialty] = useState('');
  const [qualifications, setQualifications] = useState('');
  const [availability, setAvailability] = useState('');
  const [bio, setBio] = useState('');
  const [areasOfExpertise, setAreasOfExpertise] = useState('')
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState('');
  const [isEditing, setIsEditing] = useState(false);
  const [profilePicture, setProfilePicture] = useState('');
  const [name, setName] = useState('')
  const navigate = useNavigate();

  useEffect(() => {
    const fetchProfile = async () => {
      setLoading(true);
      setError('');
      try {
        const token = localStorage.getItem('token');
        if (!token) {
          setError('Authentication required. Please login.');
          return;
        }

        const data = await getConsultantProfile(token);
        setSpecialty(data.specialty);
        setQualifications(data.qualifications);
        setAvailability(data.availability);
        setProfilePicture(data.profilePicture || "https://placehold.co/128x128");
        setBio(data.bio)
        setAreasOfExpertise(data.areasOfExpertise)
        setName(data.fullName)
      } catch (err) {
        setError('Failed to retrieve consultant profile. Please try again.');
        console.error('Failed to fetch consultant profile:', err);
      } finally {
        setLoading(false);
      }
    };

    fetchProfile();
  }, []);

  const handleEditClick = () => {
    setIsEditing(true);
  };

  const handleCancelClick = () => {
    setIsEditing(false);
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    setLoading(true);
    setError('');

    try {
      const token = localStorage.getItem('token');
      if (!token) {
        setError('Authentication required. Please login.');
        return;
      }

      await updateConsultantProfile(token, specialty, qualifications, availability);
      setIsEditing(false);
    } catch (err) {
      setError('Failed to update consultant profile. Please try again.');
      console.error('Consultant profile update failed:', err);
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="min-h-screen bg-gray-100 p-10">
      <section className="max-w-4xl mx-auto bg-white rounded-2xl shadow-xl p-8">
        <h2 className="text-3xl font-semibold text-gray-800 text-center mb-6">
          Consultant Profile
        </h2>

        {loading && <p className="text-center">Loading profile information...</p>}
        {error && <p className="text-center text-red-500">{error}</p>}

        {!loading && !error && (
          <div>
            {isEditing ? (
              <form onSubmit={handleSubmit}>
                <div className="mb-4">
                  <label htmlFor="specialty" className="block text-gray-700 text-sm font-bold mb-2">
                    Specialty
                  </label>
                  <input
                    type="text"
                    id="specialty"
                    className="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"
                    value={specialty}
                    onChange={(e) => setSpecialty(e.target.value)}
                  />
                </div>

                <div className="mb-4">
                  <label htmlFor="qualifications" className="block text-gray-700 text-sm font-bold mb-2">
                    Qualifications
                  </label>
                  <input
                    type="text"
                    id="qualifications"
                    className="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"
                    value={qualifications}
                    onChange={(e) => setQualifications(e.target.value)}
                  />
                </div>

                <div className="mb-6">
                  <label htmlFor="availability" className="block text-gray-700 text-sm font-bold mb-2">
                    Availability
                  </label>
                  <input
                    type="text"
                    id="availability"
                    className="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"
                    placeholder="e.g., Mon-Fri, 9am-5pm"
                    value={availability}
                    onChange={(e) => setAvailability(e.target.value)}
                  />
                </div>

                <div className="flex items-center justify-between">
                  <button
                    className="bg-blue-500 hover:bg-blue-700 text-white font-bold py-3 px-6 rounded-full focus:outline-none focus:shadow-outline"
                    type="submit"
                  >
                    Save Changes
                  </button>
                  <button
                    className="bg-gray-400 hover:bg-gray-500 text-gray-700 font-bold py-3 px-6 rounded-full focus:outline-none focus:shadow-outline"
                    type="button"
                    onClick={handleCancelClick}
                  >
                    Cancel
                  </button>
                </div>
              </form>
            ) : (
              <div>
                <div className="flex items-center justify-center mb-4">
                  <img
                    className="rounded-full w-32 h-32 mx-auto mb-4"
                    src={profilePicture}
                    alt="Profile Picture"
                  />
                </div>
                <div className="flex items-center mb-4">
                  <User className="h-6 w-6 mr-2 text-gray-500" />
                  <p className="text-gray-700 font-semibold">Name: {name}</p>
                </div>
                <div className="flex items-center mb-4">
                  <User className="h-6 w-6 mr-2 text-gray-500" />
                  <p className="text-gray-700 font-semibold">Bio: {bio}</p>
                </div>
                <div className="flex items-center mb-4">
                  <User className="h-6 w-6 mr-2 text-gray-500" />
                  <p className="text-gray-700 font-semibold">Expertise: {areasOfExpertise}</p>
                </div>
                <div className="flex items-center mb-4">
                  <User className="h-6 w-6 mr-2 text-gray-500" />
                  <p className="text-gray-700 font-semibold">Specialty: {specialty}</p>
                </div>
                <div className="flex items-center mb-4">
                  <User className="h-6 w-6 mr-2 text-gray-500" />
                  <p className="text-gray-700 font-semibold">Qualifications: {qualifications}</p>
                </div>
                <div className="flex items-center mb-4">
                  <Calendar className="h-6 w-6 mr-2 text-gray-500" />
                  <p className="text-gray-700 font-semibold">Availability: {availability}</p>
                </div>

                <button
                  className="bg-blue-500 hover:bg-blue-700 text-white font-bold py-3 px-6 rounded-full focus:outline-none focus:shadow-outline flex items-center"
                  type="button"
                  onClick={handleEditClick}
                >
                  <Edit className="h-5 w-5 mr-2" />
                  Edit Profile
                </button>
              </div>
            )}
          </div>
        )}
      </section>
    </div>
  );
};

export default ConsultantProfile;
// File: frontend/src/pages/ConsultantSearch.jsx
import React, { useState, useEffect } from 'react';
import { Link } from 'react-router-dom';
import { Search } from 'lucide-react';
import { getConsultants } from '../utils/api';

const ConsultantSearch = () => {
  const [searchQuery, setSearchQuery] = useState('');
  const [specialtyFilter, setSpecialtyFilter] = useState('');
  const [availabilityFilter, setAvailabilityFilter] = useState('');
  const [consultants, setConsultants] = useState([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');

  useEffect(() => {
    const fetchConsultants = async () => {
      setLoading(true);
      setError('');
      try {
        const data = await getConsultants(specialtyFilter, null, availabilityFilter);
        setConsultants(data);
      } catch (err) {
        setError('Failed to retrieve consultants. Please try again.');
        setConsultants([]);
        console.error('Failed to fetch consultants:', err);
      } finally {
        setLoading(false);
      }
    };

    fetchConsultants();
  }, [specialtyFilter, availabilityFilter]);

  const handleSearchChange = (e) => {
    setSearchQuery(e.target.value);
  };

  const filteredConsultants = consultants.filter(consultant => {
    const fullName = `${consultant.specialty} ${consultant.qualifications}`.toLowerCase();
    return fullName.includes(searchQuery.toLowerCase());
  });

  return (
    <div className="min-h-screen bg-gray-100 p-10">
      {/* Search Bar */}
      <div className="max-w-4xl mx-auto mb-8">
        <div className="flex items-center">
          <div className="relative w-full">
            <div className="absolute inset-y-0 left-0 flex items-center pl-3 pointer-events-none">
              <Search className="w-5 h-5 text-gray-500" />
            </div>
            <input
              type="search"
              className="block w-full p-4 pl-10 text-sm text-gray-900 border border-gray-300 rounded-lg bg-gray-50 focus:ring-blue-500 focus:border-blue-500"
              placeholder="Search consultants by specialty..."
              value={searchQuery}
              onChange={handleSearchChange}
            />
          </div>
        </div>
      </div>

      {/* Filter Options */}
      <div className="max-w-4xl mx-auto mb-8">
        <div className="flex items-center space-x-4">
          <div>
            <label htmlFor="specialty" className="block text-gray-700 text-sm font-bold mb-2">
              Specialty:
            </label>
            <select
              id="specialty"
              className="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"
              value={specialtyFilter}
              onChange={(e) => setSpecialtyFilter(e.target.value)}
            >
              <option value="">All Specialties</option>
              <option value="Cardiology">Cardiology</option>
              <option value="Neurology">Neurology</option>
              <option value="Pediatrics">Pediatrics</option>
            </select>
          </div>
          <div>
              <label htmlFor="availability" className="block text-gray-700 text-sm font-bold mb-2">
                  Availability:
              </label>
              <select
                  id="availability"
                  className="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"
                  value={availabilityFilter}
                  onChange={(e) => setAvailabilityFilter(e.target.value)}
              >
                  <option value="">All Availability</option>
                  <option value="Mon-Fri">Mon-Fri</option>
                  <option value="Tue-Sat">Tue-Sat</option>
                  <option value="Wed-Sun">Wed-Sun</option>
              </select>
          </div>
        </div>
      </div>

      {/* Consultant List */}
      <section className="max-w-6xl mx-auto">
        <h2 className="text-3xl font-semibold text-gray-800 text-center mb-8">
          Available Consultants
        </h2>

        {loading && <p className="text-center">Loading consultants...</p>}
        {error && <p className="text-center text-red-500">{error}</p>}

        <div className="grid grid-cols-1 md:grid-cols-3 gap-8">
          {filteredConsultants.map((consultant) => (
            <div key={consultant.id} className="bg-white rounded-2xl shadow-md p-6 hover:shadow-lg transition-shadow duration-300">
              <img
                className="w-full h-48 object-cover rounded-t-2xl mb-4"
                src={consultant.imageUrl || "https://placehold.co/600x400"}
                alt={consultant.specialty}
              />
              <h3 className="text-xl font-semibold text-gray-700 mb-2">
                {consultant.specialty}
              </h3>
              <p className="text-gray-600 mb-4">
                Qualifications: {consultant.qualifications}
              </p>
              <Link
                to={`/consultantdetails/${consultant.id}`}
                className="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline"
              >
                View Profile
              </Link>
            </div>
          ))}
        </div>
      </section>
    </div>
  );
};

export default ConsultantSearch;
// File: frontend/src/pages/ConsultationDashboard.jsx
import React, { useState, useEffect } from 'react';
import { Link } from 'react-router-dom';
import { getBookings, getConsultantBookings } from '../utils/api';
import { Calendar } from 'lucide-react';

const ConsultationDashboard = () => {
  const [upcomingConsultations, setUpcomingConsultations] = useState([]);
  const [pastConsultations, setPastConsultations] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState('');
  const [isConsultant, setIsConsultant] = useState(localStorage.getItem('isConsultant') === 'true');

  useEffect(() => {
    const fetchConsultations = async () => {
      setLoading(true);
      setError('');
      try {
        const token = localStorage.getItem('token');
        if (!token) {
          setError('Authentication required. Please login.');
          return;
        }

        let data;
        if (isConsultant === 'true') {
          data = await getConsultantBookings(token);
        } else {
          data = await getBookings(token);
        }

        // Filter consultations into upcoming and past
        const now = new Date();
        const upcoming = data.filter(booking => new Date(booking.date) >= now);
        const past = data.filter(booking => new Date(booking.date) < now);

        setUpcomingConsultations(upcoming);
        setPastConsultations(past);

      } catch (err) {
        setError('Failed to retrieve consultations. Please try again.');
        setUpcomingConsultations([]);
        setPastConsultations([]);
        console.error('Failed to fetch consultations:', err);
      } finally {
        setLoading(false);
      }
    };

    fetchConsultations();
  }, [isConsultant]);

  return (
    <div className="min-h-screen bg-gray-100 p-10">
      {/* Upcoming Consultations */}
      <section className="max-w-4xl mx-auto bg-white rounded-2xl shadow-xl p-8 mb-8">
        <h2 className="text-3xl font-semibold text-gray-800 mb-4">
          Upcoming Consultations
        </h2>

        {loading && <p className="text-center">Loading upcoming consultations...</p>}
        {error && <p className="text-center text-red-500">{error}</p>}

        {upcomingConsultations.length === 0 && !loading && !error ? (
          <p className="text-center">No upcoming consultations found.</p>
        ) : (
          <ul className="divide-y divide-gray-200">
            {upcomingConsultations.map((consultation) => (
              <li key={consultation.id} className="py-4">
                <div className="flex items-center justify-between">
                  <div>
                    <p className="text-lg font-semibold text-gray-700">
                      <Calendar className="inline-block h-5 w-5 mr-1" />
                      {new Date(consultation.date).toLocaleDateString()}
                    </p>
                    <p className="text-gray-600">
                      Time: {consultation.time}
                    </p>
                    <p className="text-gray-600">
                      Status: {consultation.status}
                    </p>
                  </div>
                  {/*<Link
                    to={`/consultantdetails/${consultation.consultantId}`}
                    className="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline"
                  >
                    View Consultant
                  </Link>*/}
                </div>
              </li>
            ))}
          </ul>
        )}
      </section>

      {/* Past Consultations */}
      <section className="max-w-4xl mx-auto bg-white rounded-2xl shadow-xl p-8">
        <h2 className="text-3xl font-semibold text-gray-800 mb-4">
          Past Consultations
        </h2>

        {loading && <p className="text-center">Loading past consultations...</p>}
        {error && <p className="text-center text-red-500">{error}</p>}

        {pastConsultations.length === 0 && !loading && !error ? (
          <p className="text-center">No past consultations found.</p>
        ) : (
          <ul className="divide-y divide-gray-200">
            {pastConsultations.map((consultation) => (
              <li key={consultation.id} className="py-4">
                <div className="flex items-center justify-between">
                  <div>
                    <p className="text-lg font-semibold text-gray-700">
                      <Calendar className="inline-block h-5 w-5 mr-1" />
                      {new Date(consultation.date).toLocaleDateString()}
                    </p>
                    <p className="text-gray-600">
                      Time: {consultation.time}
                    </p>
                    <p className="text-gray-600">
                      Status: {consultation.status}
                    </p>
                  </div>
                  {/* <Link
                    to={`/consultantdetails/${consultation.consultantId}`}
                    className="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline"
                  >
                    View Consultant
                  </Link>*/}
                </div>
              </li>
            ))}
          </ul>
        )}
      </section>
    </div>
  );
};

export default ConsultationDashboard;
// File: frontend/src/pages/ContactUs.jsx
import React, { useState } from 'react';
import { Phone, Mail, MapPin } from 'lucide-react';
import { submitContactForm } from '../utils/api';

const ContactUs = () => {
  const [name, setName] = useState('');
  const [email, setEmail] = useState('');
  const [subject, setSubject] = useState('');
  const [message, setMessage] = useState('');
  const [error, setError] = useState('');
  const [successMessage, setSuccessMessage] = useState('');

  const handleSubmit = async (e) => {
    e.preventDefault();

    if (!name || !email || !subject || !message) {
      setError('Please fill in all fields.');
      setSuccessMessage('');
      return;
    }

    try {
      await submitContactForm(name, email, subject, message);
      setSuccessMessage('Form submitted successfully!');
      setError('');
      setName('');
      setEmail('');
      setSubject('');
      setMessage('');
    } catch (err) {
      console.error('Form submission failed:', err);  // Keep the console log for debugging
      setError('Failed to submit the form. Please try again.'); // Display error to the user
      setSuccessMessage('');
    }
  };

  return (
    <div className="min-h-screen bg-gray-100 p-10">
      {/* Contact Information */}
      <section className="max-w-4xl mx-auto bg-white rounded-2xl shadow-xl p-8 mb-12">
        <h2 className="text-3xl font-semibold text-gray-800 text-center mb-6">
          Contact Us
        </h2>
        <div className="md:flex md:justify-between">
          <div className="mb-6 md:mb-0">
            <h3 className="text-lg font-semibold mb-4">Our Information</h3>
            <p className="text-gray-700 flex items-center mb-2">
              <Phone className="mr-2 h-5 w-5 text-blue-500" />
              +1 (555) 123-4567
            </p>
            <p className="text-gray-700 flex items-center mb-2">
              <Mail className="mr-2 h-5 w-5 text-green-500" />
              info@healthconsultant.com
            </p>
            <p className="text-gray-700 flex items-center">
              <MapPin className="mr-2 h-5 w-5 text-red-500" />
              123 Health Street, Cityville
            </p>
          </div>

          {/* Contact Form */}
          <form className="w-full md:w-1/2" onSubmit={handleSubmit}>
            {error && (
              <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative mb-4" role="alert">
                <span className="block sm:inline">{error}</span>
              </div>
            )}

            {successMessage && (
              <div className="bg-green-100 border border-green-400 text-green-700 px-4 py-3 rounded relative mb-4" role="alert">
                <span className="block sm:inline">{successMessage}</span>
              </div>
            )}

            <div className="mb-4">
              <label htmlFor="name" className="block text-gray-700 text-sm font-bold mb-2">
                Name
              </label>
              <input
                type="text"
                id="name"
                className="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"
                placeholder="Your Name"
                value={name}
                onChange={(e) => setName(e.target.value)}
              />
            </div>

            <div className="mb-4">
              <label htmlFor="email" className="block text-gray-700 text-sm font-bold mb-2">
                Email
              </label>
              <input
                type="email"
                id="email"
                className="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"
                placeholder="Your Email"
                value={email}
                onChange={(e) => setEmail(e.target.value)}
              />
            </div>

            <div className="mb-4">
              <label htmlFor="subject" className="block text-gray-700 text-sm font-bold mb-2">
                Subject
              </label>
              <input
                type="text"
                id="subject"
                className="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"
                placeholder="Subject"
                value={subject}
                onChange={(e) => setSubject(e.target.value)}
              />
            </div>

            <div className="mb-6">
              <label htmlFor="message" className="block text-gray-700 text-sm font-bold mb-2">
                Message
              </label>
              <textarea
                id="message"
                rows="4"
                className="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"
                placeholder="Your Message"
                value={message}
                onChange={(e) => setMessage(e.target.value)}
              />
            </div>

            <div className="flex items-center justify-between">
              <button
                className="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline"
                type="submit"
              >
                Submit
              </button>
            </div>
          </form>
        </div>
      </section>
    </div>
  );
};

export default ContactUs;

// File: frontend/src/pages/HealthRecords.jsx
import React, { useState, useEffect } from 'react';
import { getHealthRecords, createHealthRecord } from '../utils/api';
import { File } from 'lucide-react';

const HealthRecords = () => {
  const [healthRecords, setHealthRecords] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState('');
  const [medicalHistory, setMedicalHistory] = useState('');
  const [ongoingTreatments, setOngoingTreatments] = useState('');
  const [prescriptions, setPrescriptions] = useState('');
  const [successMessage, setSuccessMessage] = useState('');

  useEffect(() => {
    const fetchHealthRecords = async () => {
      setLoading(true);
      setError('');
      try {
        const token = localStorage.getItem('token');
        if (!token) {
          setError('Authentication required. Please login.');
          return;
        }

        const data = await getHealthRecords(token);
        setHealthRecords(data);
      } catch (err) {
        setError('Failed to retrieve health records. Please try again.');
        setHealthRecords([]);
        console.error('Failed to fetch health records:', err);
      } finally {
        setLoading(false);
      }
    };

    fetchHealthRecords();
  }, []);

  const handleSubmit = async (e) => {
    e.preventDefault();
    setLoading(true);
    setError('');
    setSuccessMessage('');

    try {
      const token = localStorage.getItem('token');
      if (!token) {
        setError('Authentication required. Please login.');
        return;
      }

      await createHealthRecord(token, medicalHistory, ongoingTreatments, prescriptions);
      setMedicalHistory('');
      setOngoingTreatments('');
      setPrescriptions('');
      setSuccessMessage('Health record added successfully!');

      // Refresh health records after adding a new one
      const data = await getHealthRecords(token);
      setHealthRecords(data);
    } catch (err) {
      setError('Failed to create health record. Please try again.');
      console.error('Failed to create health record:', err);
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="min-h-screen bg-gray-100 p-10">
      {/* Medical History */}
      <section className="max-w-4xl mx-auto bg-white rounded-2xl shadow-xl p-8 mb-8">
        <h2 className="text-3xl font-semibold text-gray-800 mb-4">
          My Health Records
        </h2>

        {loading && <p className="text-center">Loading health records...</p>}
        {error && <p className="text-center text-red-500">{error}</p>}

        {healthRecords.length === 0 && !loading && !error ? (
          <p className="text-center">No health records found.</p>
        ) : (
          <ul className="divide-y divide-gray-200">
            {healthRecords.map((record) => (
              <li key={record.id} className="py-4">
                <div className="flex items-center justify-between">
                  <div>
                    <p className="text-lg font-semibold text-gray-700">
                      <File className="inline-block h-5 w-5 mr-1" />
                      Record ID: {record.id}
                    </p>
                    <p className="text-gray-600">
                      Medical History: {record.medicalHistory}
                    </p>
                    <p className="text-gray-600">
                      Ongoing Treatments: {record.ongoingTreatments}
                    </p>
                    <p className="text-gray-600">
                      Prescriptions: {record.prescriptions}
                    </p>
                  </div>
                </div>
              </li>
            ))}
          </ul>
        )}
      </section>

      {/* Add Record Form */}
      <section className="max-w-4xl mx-auto bg-white rounded-2xl shadow-xl p-8 mb-8">
        <h2 className="text-2xl font-semibold text-gray-800 mb-4">
          Add New Health Record
        </h2>

        {successMessage && (
          <div className="bg-green-100 border border-green-400 text-green-700 px-4 py-3 rounded relative mb-4" role="alert">
            <span className="block sm:inline">{successMessage}</span>
          </div>
        )}

        <form onSubmit={handleSubmit}>
          <div className="mb-4">
            <label htmlFor="medicalHistory" className="block text-gray-700 text-sm font-bold mb-2">
              Medical History
            </label>
            <textarea
              id="medicalHistory"
              className="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"
              value={medicalHistory}
              onChange={(e) => setMedicalHistory(e.target.value)}
              rows="4"
              required
            />
          </div>

          <div className="mb-4">
            <label htmlFor="ongoingTreatments" className="block text-gray-700 text-sm font-bold mb-2">
              Ongoing Treatments
            </label>
            <textarea
              id="ongoingTreatments"
              className="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"
              value={ongoingTreatments}
              onChange={(e) => setOngoingTreatments(e.target.value)}
              rows="4"
              required
            />
          </div>

          <div className="mb-6">
            <label htmlFor="prescriptions" className="block text-gray-700 text-sm font-bold mb-2">
              Prescriptions
            </label>
            <textarea
              id="prescriptions"
              className="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"
              value={prescriptions}
              onChange={(e) => setPrescriptions(e.target.value)}
              rows="4"
              required
            />
          </div>

          <button
            type="submit"
            className="bg-green-500 hover:bg-green-700 text-white font-bold py-3 px-8 rounded-full shadow-lg transition-colors duration-300"
          >
            Add Record
          </button>
        </form>
      </section>
    </div>
  );
};

export default HealthRecords;
// File: frontend/src/pages/Homepage.jsx
import React from 'react';
import { Link } from 'react-router-dom';
import { Home, Phone, User, LogOut } from 'lucide-react';

const Homepage = () => {
  return (
    <div className="min-h-screen bg-gray-100 p-10">
      {/* Hero Section */}
      <section className="bg-gradient-to-br from-blue-100 to-purple-100 rounded-2xl shadow-xl p-8 md:p-16 text-center">
        <h1 className="text-4xl md:text-6xl font-bold text-gray-800 mb-4">
          Find the Best Health Consultant
        </h1>
        <p className="text-lg md:text-xl text-gray-700 mb-8">
          Connect with qualified health consultants and get personalized advice for a healthier life.
        </p>
        <Link
          to="/consultantsearch"
          className="bg-blue-500 hover:bg-blue-700 text-white font-bold py-3 px-8 rounded-full shadow-lg transition-colors duration-300"
        >
          Find a Consultant
        </Link>
      </section>

      {/* Features Section */}
      <section className="mt-16">
        <h2 className="text-3xl font-semibold text-gray-800 text-center mb-8">
          Our Key Features
        </h2>
        <div className="grid grid-cols-1 md:grid-cols-3 gap-8">
          {/* Feature 1 */}
          <div className="bg-white rounded-2xl shadow-md p-6 hover:shadow-lg transition-shadow duration-300">
            <Home className="h-8 w-8 text-blue-500 mb-4" />
            <h3 className="text-xl font-semibold text-gray-700 mb-2">
              Expert Consultants
            </h3>
            <p className="text-gray-600">
              Connect with experienced and qualified health consultants in various specialties.
            </p>
          </div>
          {/* Feature 2 */}
          <div className="bg-white rounded-2xl shadow-md p-6 hover:shadow-lg transition-shadow duration-300">
            <Phone className="h-8 w-8 text-green-500 mb-4" />
            <h3 className="text-xl font-semibold text-gray-700 mb-2">
              Personalized Advice
            </h3>
            <p className="text-gray-600">
              Receive tailored health advice and guidance based on your unique needs and concerns.
            </p>
          </div>
          {/* Feature 3 */}
          <div className="bg-white rounded-2xl shadow-md p-6 hover:shadow-lg transition-shadow duration-300">
            <User className="h-8 w-8 text-purple-500 mb-4" />
            <h3 className="text-xl font-semibold text-gray-700 mb-2">
              Secure Platform
            </h3>
            <p className="text-gray-600">
              Your health information is safe and secure with our encrypted platform.
            </p>
          </div>
        </div>
      </section>

      {/* Testimonials Section */}
      <section className="mt-16">
        <h2 className="text-3xl font-semibold text-gray-800 text-center mb-8">
          What Our Users Say
        </h2>
        <div className="flex flex-col md:flex-row items-center justify-center gap-8">
          {/* Testimonial 1 */}
          <div className="bg-white rounded-2xl shadow-md p-6 w-full md:w-1/3">
            <img
              className="h-16 w-16 rounded-full mx-auto mb-4"
              src="https://placehold.co/64x64"
              alt="User Avatar"
            />
            <p className="text-gray-700 text-center mb-2">
              "This platform has been a game-changer for managing my health. I highly recommend it!"
            </p>
            <p className="text-gray-600 font-semibold text-center">
              - Sarah Johnson
            </p>
          </div>
          {/* Testimonial 2 */}
          <div className="bg-white rounded-2xl shadow-md p-6 w-full md:w-1/3">
            <img
              className="h-16 w-16 rounded-full mx-auto mb-4"
              src="https://placehold.co/64x64"
              alt="User Avatar"
            />
            <p className="text-gray-700 text-center mb-2">
              "I found the perfect consultant for my needs. The process was easy and efficient."
            </p>
            <p className="text-gray-600 font-semibold text-center">
              - Michael Davis
            </p>
          </div>
        </div>
      </section>
    </div>
  );
};

export default Homepage;
// File: frontend/src/pages/Login.jsx
import React, { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { Mail, Lock } from 'lucide-react';
import { loginUser } from '../utils/api';

const Login = ({ setIsLoggedIn, setUserRole, setIsConsultant, setIsApproved, onLoginSuccess, setProfilePicture }) => {
    const [email, setEmail] = useState('');
    const [password, setPassword] = useState('');
    const [error, setError] = useState('');
    const navigate = useNavigate();

    const handleSubmit = async (e) => {
        e.preventDefault();
        setError('');

        if (!email || !password) {
            setError('Please fill in all fields.');
            return;
        }

        try {
            const data = await loginUser(email, password);

            // Store necessary data in local storage
            localStorage.setItem('token', data.token);
            localStorage.setItem('userRole', data.role);
            localStorage.setItem('isConsultant', data.isConsultant);
            localStorage.setItem('isApproved', String(data.isApproved)); // Ensure it's a string
            localStorage.setItem('userId', String(data.userId)); // Store userId

            // Update state in App.jsx
            setIsLoggedIn(true);
            setUserRole(data.role);
            setIsConsultant(data.isConsultant === 1 || data.isConsultant === true);
            setIsApproved(Boolean(data.isApproved));
            setProfilePicture(data.profilePicture);

            // Call the callback function to notify the parent component about the successful login
            onLoginSuccess(data.role, data.isConsultant, data.isApproved);


            if (data.role === 'consultant') {
                navigate('/consultantdashboard');
            } else if (data.role === 'admin') {
                navigate('/admindashboard');
            } else {
                navigate('/consultationdashboard');
            }
        } catch (err) {
            setError('Invalid email or password. Please try again.');
            console.error('Login failed:', err);
        }
    };

    return (
        <div className="min-h-screen bg-gray-100 flex items-center justify-center">
            <div className="bg-white rounded-2xl shadow-xl p-8 max-w-md w-full">
                <h2 className="text-3xl font-semibold text-gray-800 text-center mb-6">
                    Login
                </h2>

                {error && (
                    <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative mb-4" role="alert">
                        <span className="block sm:inline">{error}</span>
                    </div>
                )}

                <form onSubmit={handleSubmit}>
                    <div className="mb-4">
                        <label htmlFor="email" className="block text-gray-700 text-sm font-bold mb-2">
                            Email
                        </label>
                        <div className="relative">
                            <div className="absolute inset-y-0 left-0 flex items-center pl-3 pointer-events-none">
                                <Mail className="w-5 h-5 text-gray-500" />
                            </div>
                            <input
                                type="email"
                                id="email"
                                className="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline pl-10"
                                placeholder="Email Address"
                                value={email}
                                onChange={(e) => setEmail(e.target.value)}
                            />
                        </div>
                    </div>

                    <div className="mb-6">
                        <label htmlFor="password" className="block text-gray-700 text-sm font-bold mb-2">
                            Password
                        </label>
                        <div className="relative">
                            <div className="absolute inset-y-0 left-0 flex items-center pl-3 pointer-events-none">
                                <Lock className="w-5 h-5 text-gray-500" />
                            </div>
                            <input
                                type="password"
                                id="password"
                                className="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline pl-10"
                                placeholder="Password"
                                value={password}
                                onChange={(e) => setPassword(e.target.value)}
                            />
                        </div>
                    </div>

                    <div className="flex items-center justify-between">
                        <button
                            className="bg-blue-500 hover:bg-blue-700 text-white font-bold py-3 px-6 rounded-full focus:outline-none focus:shadow-outline"
                            type="submit"
                        >
                            Login
                        </button>
                        <a className="inline-block align-baseline font-bold text-sm text-blue-500 hover:text-blue-800" href="#">
                            Forgot Password?
                        </a>
                    </div>
                </form>
            </div>
        </div>
    );
};

export default Login;
// File: frontend/src/pages/Messaging.jsx
import React, { useState, useEffect } from 'react';
import { MessageCircle } from 'lucide-react';
import { getMessages, createMessage } from '../utils/api';

const Messaging = () => {
  const [messages, setMessages] = useState([]);
  const [newMessage, setNewMessage] = useState('');
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState('');
  const [consultantId, setConsultantId] = useState(1); // Example, set dynamically later

  useEffect(() => {
    const fetchMessages = async () => {
      setLoading(true);
      setError('');
      try {
        const token = localStorage.getItem('token');
        if (!token) {
          setError('Authentication required. Please login.');
          return;
        }

        const data = await getMessages(token);
        setMessages(data);
      } catch (err) {
        setError('Failed to retrieve messages. Please try again.');
        setMessages([]);
        console.error('Failed to fetch messages:', err);
      } finally {
        setLoading(false);
      }
    };

    fetchMessages();
  }, []);

  const handleSendMessage = async (e) => {
    e.preventDefault();
    setLoading(true);
    setError('');

    try {
      const token = localStorage.getItem('token');
      if (!token) {
        setError('Authentication required. Please login.');
        return;
      }

      await createMessage(token, consultantId, newMessage);
      setNewMessage('');

      // Fetch updated messages after sending
      const updatedMessages = await getMessages(token);
      setMessages(updatedMessages);
    } catch (err) {
      setError('Failed to send message. Please try again.');
      console.error('Message sending failed:', err);
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="min-h-screen bg-gray-100 p-10">
      {/* Message List */}
      <section className="max-w-4xl mx-auto bg-white rounded-2xl shadow-xl p-8 mb-8">
        <h2 className="text-3xl font-semibold text-gray-800 mb-4">
          Messaging
        </h2>

        {loading && <p className="text-center">Loading messages...</p>}
        {error && <p className="text-center text-red-500">{error}</p>}

        <div className="space-y-4">
          {messages.map((message) => (
            <div
              key={message.id}
              className={`rounded-2xl p-4 ${message.userId === 1 ? 'bg-blue-100 self-end' : 'bg-gray-100 self-start'
                }`}
              style={{ maxWidth: '80%' }}
            >
              <p className="text-gray-700">{message.message}</p>
              <p className="text-gray-500 text-sm mt-1 text-right">
                {message.timestamp}
              </p>
            </div>
          ))}
        </div>

        {/* Message Input */}
        <form onSubmit={handleSendMessage} className="mt-8">
          <div className="flex items-center">
            <textarea
              className="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"
              placeholder="Type your message..."
              value={newMessage}
              onChange={(e) => setNewMessage(e.target.value)}
            />
            <button
              type="submit"
              className="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline ml-4"
            >
              <MessageCircle className="inline-block h-5 w-5 mr-1" />
              Send
            </button>
          </div>
        </form>
      </section>
    </div>
  );
};

export default Messaging;
// File: frontend/src/pages/NotFound.jsx
import React from 'react';
import { Link } from 'react-router-dom';
import { Home } from 'lucide-react';

const NotFound = () => {
  return (
    <div className="min-h-screen bg-gray-100 p-10 flex flex-col items-center justify-center">
      {/* Error Message */}
      <section className="text-center mb-8">
        <h2 className="text-4xl font-bold text-gray-800 mb-4">
          404 Not Found
        </h2>
        <p className="text-gray-700 leading-relaxed">
          Oops! The page you are looking for could not be found.
        </p>
      </section>

      {/* Back to Home Button */}
      <Link
        to="/"
        className="bg-blue-500 hover:bg-blue-700 text-white font-bold py-3 px-8 rounded-full shadow-lg transition-colors duration-300 flex items-center"
      >
        <Home className="mr-2 h-5 w-5" />
        Back to Home
      </Link>
    </div>
  );
};

export default NotFound;
// File: frontend/src/pages/Payment.jsx
import React, { useState, useEffect } from 'react';
import { Link } from 'react-router-dom';
import { getPayments } from '../utils/api';
import { CreditCard, Plus } from 'lucide-react';

const Payment = () => {
  const [payments, setPayments] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState('');

  useEffect(() => {
    const fetchPayments = async () => {
      setLoading(true);
      setError('');
      try {
        const token = localStorage.getItem('token');
        if (!token) {
          setError('Authentication required. Please login.');
          return;
        }

        const data = await getPayments(token);
        setPayments(data);
      } catch (err) {
        setError('Failed to retrieve payments. Please try again.');
        setPayments([]);
        console.error('Failed to fetch payments:', err);
      } finally {
        setLoading(false);
      }
    };

    fetchPayments();
  }, []);

  return (
    <div className="min-h-screen bg-gray-100 p-10">
      {/* Payment History */}
      <section className="max-w-4xl mx-auto bg-white rounded-2xl shadow-xl p-8 mb-8">
        <h2 className="text-3xl font-semibold text-gray-800 mb-4">
          Payment History
        </h2>

        {loading && <p className="text-center">Loading payment history...</p>}
        {error && <p className="text-center text-red-500">{error}</p>}

        {payments.length === 0 && !loading && !error ? (
          <p className="text-center">No payment history found.</p>
        ) : (
          <ul className="divide-y divide-gray-200">
            {payments.map((payment) => (
              <li key={payment.id} className="py-4">
                <div className="flex items-center justify-between">
                  <div>
                    <p className="text-lg font-semibold text-gray-700">
                      <CreditCard className="inline-block h-5 w-5 mr-1" />
                      Payment ID: {payment.id}
                    </p>
                    <p className="text-gray-600">
                      Date: {payment.date}
                    </p>
                    <p className="text-gray-600">
                      Amount: ${payment.amount}
                    </p>
                    <p className="text-gray-600">
                      Status: {payment.status}
                    </p>
                  </div>
                </div>
              </li>
            ))}
          </ul>
        )}
      </section>

      {/* Payment Method (Placeholder) */}
      <section className="max-w-4xl mx-auto bg-white rounded-2xl shadow-xl p-8 mb-8">
        <h2 className="text-3xl font-semibold text-gray-800 mb-4">
          Payment Method
        </h2>
        <p className="text-gray-700">
          Visa ending in 4242
        </p>
      </section>

      {/* Add Payment Method Button */}
      <div className="max-w-4xl mx-auto text-center">
        <Link
          to="#"
          className="bg-green-500 hover:bg-green-700 text-white font-bold py-3 px-8 rounded-full shadow-lg transition-colors duration-300 inline-flex items-center"
        >
          <Plus className="mr-2 h-5 w-5" />
          Add New Payment Method
        </Link>
      </div>
    </div>
  );
};

export default Payment;
// File: frontend/src/pages/PrivacyPolicy.jsx
import React from 'react';

const PrivacyPolicy = () => {
  return (
    <div className="min-h-screen bg-gray-100 p-10">
      {/* Privacy Policy Text */}
      <section className="max-w-4xl mx-auto bg-white rounded-2xl shadow-xl p-8">
        <h2 className="text-3xl font-semibold text-gray-800 text-center mb-6">
          Privacy Policy
        </h2>
        <p className="text-gray-700 leading-relaxed mb-4">
          Your privacy is important to us. It is Health Consultant's policy to
          respect your privacy regarding any information we may collect from you
          across our website,{' '}
          <a href="/" className="text-blue-500 hover:underline">
            healthconsultant.com
          </a>
          , and other sites we own and operate.
        </p>

        <h3 className="text-2xl font-semibold text-gray-800 mb-4">
          Information We Collect
        </h3>
        <p className="text-gray-700 leading-relaxed mb-4">
          We collect information in the following ways:
        </p>
        <ul className="list-disc pl-5 mb-4">
          <li>
            <strong>Information you directly provide to us</strong>: When you register
            on our website, we may ask for your name, email address, phone
            number, etc.
          </li>
          <li>
            <strong>Information automatically collected</strong>: When you visit our
            website, we may automatically collect certain information such as
            your IP address, device type, browser type, etc.
          </li>
        </ul>

        <h3 className="text-2xl font-semibold text-gray-800 mb-4">
          How We Use Your Information
        </h3>
        <p className="text-gray-700 leading-relaxed mb-4">
          We may use the information we collect from you to:
        </p>
        <ul className="list-disc pl-5 mb-4">
          <li>Provide, operate, and maintain our website</li>
          <li>Improve, personalize, and expand our website</li>
          <li>Understand and analyze how you use our website</li>
          <li>Develop new products, services, features, and functionality</li>
          <li>Communicate with you, either directly or through one of our partners, including for customer service, to provide you with updates and other information relating to the website, and for marketing and promotional purposes</li>
        </ul>

        <h3 className="text-2xl font-semibold text-gray-800 mb-4">
          Sharing Your Information
        </h3>
        <p className="text-gray-700 leading-relaxed mb-4">
          We may share your information with third parties in the following
          circumstances:
        </p>
        <ul className="list-disc pl-5 mb-4">
          <li>With your consent</li>
          <li>With service providers who perform services on our behalf</li>
          <li>For legal reasons</li>
        </ul>

        <h3 className="text-2xl font-semibold text-gray-800 mb-4">
          Security
        </h3>
        <p className="text-gray-700 leading-relaxed mb-4">
          We take reasonable measures to protect your information from
          unauthorized access, use, or disclosure.
        </p>

        <h3 className="text-2xl font-semibold text-gray-800 mb-4">
          Changes to This Privacy Policy
        </h3>
        <p className="text-gray-700 leading-relaxed mb-4">
          We may update our Privacy Policy from time to time. We will notify you
          of any changes by posting the new Privacy Policy on this page.
        </p>

        <p className="text-gray-700 leading-relaxed">
          This policy is effective as of June 13, 2024.
        </p>
      </section>
    </div>
  );
};

export default PrivacyPolicy;
// File: frontend/src/pages/Register.jsx
import React, { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { Mail, Lock, User } from 'lucide-react';

// Material-UI Components
import {
    Stepper,
    Step,
    StepLabel,
    Button,
    Typography,
    Box,
    Alert,
    Grid,FormControl, InputLabel, Select , MenuItem , TextField 
} from '@mui/material';

import RegisterForm from '../components/RegisterForm';

import { registerUser } from '../utils/api';

const getSteps = (role) => {
    if (role === 'consultant') {
        return ['Basic Information', 'Professional Details'];
    } else {
        return ['Basic Information', 'Medical Information'];
    }
};

const Register = () => {
    const [activeStep, setActiveStep] = useState(0);
    const [skipped, setSkipped] = useState(new Set());

    const [role, setRole] = useState('user');
    const steps = getSteps(role);

    const [formData, setFormData] = useState({
        fullName: '',
        email: '',
        password: '',
        confirmPassword: '',
        phone: '',
        bio: '',
        qualification: '',
        areasOfExpertise: '',
        speciality: '',
        availability: '',
        bloodGroup: '',
        medicalHistory: '',
        currentPrescriptions: '',
        profilePicture: null,
    });

    const [error, setError] = useState('');
    const navigate = useNavigate();

    const isStepOptional = (step) => {
        return false; // No steps are optional right now.
    };

    const isStepSkipped = (step) => {
        return skipped.has(step);
    };

    const handleNext = () => {
        let newSkipped = skipped;
        if (isStepSkipped(activeStep)) {
            newSkipped = new Set(newSkipped.values());
            newSkipped.delete(activeStep);
        }

        setActiveStep((prevActiveStep) => prevActiveStep + 1);
        setSkipped(newSkipped);
    };

    const handleBack = () => {
        setActiveStep((prevActiveStep) => prevActiveStep - 1);
    };

    const handleSkip = () => {
        if (!isStepOptional(activeStep)) {
            return;
        }

        setActiveStep((prevActiveStep) => prevActiveStep + 1);
        setSkipped((prevSkipped) => {
            const newSkipped = new Set(prevSkipped.values());
            newSkipped.add(activeStep);
            return newSkipped;
        });
    };

    const handleReset = () => {
        setActiveStep(0);
    };

    const handleSubmit = async (e) => {
        e.preventDefault();
        setError('');

        try {
            const formDataToSend = new FormData();
            for (const key in formData) {
                formDataToSend.append(key, formData[key]);
            }
            formDataToSend.append('role', role);

            await registerUser(formDataToSend);
            navigate('/login');
        } catch (err) {
            setError('Registration failed. Please try again.');
            console.error('Registration failed:', err);
        }
    };

    const getStepContent = (step) => {
      switch (step) {
          case 0: // Basic Information and Role Selection
              return (
                  <Grid container spacing={2}>
                      <Grid item xs={12}>
                          <FormControl fullWidth>
                              <InputLabel id="role-label">Registering as</InputLabel>
                              <Select
                                  labelId="role-label"
                                  id="role"
                                  value={role}
                                  label="Registering as"
                                  onChange={(e) => {
                                      setRole(e.target.value);
                                      setFormData(prev => ({ ...prev, })); // Reset to the first step when changing role
                                  }}
                              >
                                  <MenuItem value="user">Looking for a Consultant</MenuItem>
                                  <MenuItem value="consultant">A Consultant</MenuItem>
                              </Select>
                          </FormControl>
                      </Grid>
                      <Grid item xs={12}>
                          <TextField
                              fullWidth
                              label="Full Name"
                              name="fullName"
                              value={formData.fullName}
                              onChange={(e) => setFormData({ ...formData, fullName: e.target.value })}
                          />
                      </Grid>
                      <Grid item xs={12}>
                          <TextField
                              fullWidth
                              label="Email"
                              name="email"
                              value={formData.email}
                              onChange={(e) => setFormData({ ...formData, email: e.target.value })}
                          />
                      </Grid>
                      <Grid item xs={12}>
                          <TextField
                              fullWidth
                              label="Phone Number"
                              name="phone"
                              value={formData.phone}
                              onChange={(e) => setFormData({ ...formData, phone: e.target.value })}
                          />
                      </Grid>
                      <Grid item xs={12}>
                          <TextField
                              fullWidth
                              label="Password"
                              name="password"
                              type="password"
                              value={formData.password}
                              onChange={(e) => setFormData({ ...formData, password: e.target.value })}
                          />
                      </Grid>
                      <Grid item xs={12}>
                          <TextField
                              fullWidth
                              label="Confirm Password"
                              name="confirmPassword"
                              type="password"
                              value={formData.confirmPassword}
                              onChange={(e) => setFormData({ ...formData, confirmPassword: e.target.value })}
                          />
                      </Grid>
                      <Grid item xs={12} sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
                          Profile Picture
                          <TextField
                              type="file"
                              label="Profile Picture"
                              InputLabelProps={{ shrink: true }}
                              onChange={(e) => setFormData({ ...formData, profilePicture: e.target.files[0] })}
                          />
                      </Grid>
                  </Grid>
              );
          case 1:
              return (
                  <RegisterForm formData={formData} setFormData={setFormData} role={role} />
              );
          default:
              return 'Unknown step';
      }
  };

    return (
        <Box sx={{ width: '100%' }}>
            <div className="min-h-screen bg-gray-100 flex items-center justify-center">
                <div className="bg-white rounded-2xl shadow-xl p-8 max-w-5xl w-full">
                    <h2 className="text-3xl font-semibold text-gray-800 text-center mb-6">
                        Register
                    </h2>

                    {error && (
                        <Alert severity="error">{error}</Alert>
                    )}

                    <Stepper activeStep={activeStep}>
                        {steps.map((label, index) => {
                            const stepProps = {};
                            const labelProps = {};
                            if (isStepOptional(index)) {
                                labelProps.optional = (
                                    <Typography variant="caption">Optional</Typography>
                                );
                            }
                            if (isStepSkipped(index)) {
                                stepProps.completed = false;
                            }
                            return (
                                <Step key={label} {...stepProps}>
                                    <StepLabel {...labelProps}>{label}</StepLabel>
                                </Step>
                            );
                        })}
                    </Stepper>
                    <br />
                    {activeStep === steps.length ? (
                        <React.Fragment>
                            <Typography sx={{ mt: 2, mb: 1 }}>
                                All steps completed - you're ready to register!
                            </Typography>
                            <Box sx={{ display: 'flex', flexDirection: 'row', pt: 2 }}>
                                <Box sx={{ flex: '1 1 auto' }} />
                                <Button onClick={handleReset}>Reset</Button>
                                <Button onClick={handleSubmit}>Submit</Button>
                            </Box>
                        </React.Fragment>
                    ) : (
                        <React.Fragment>
                            {getStepContent(activeStep)}
                            <Box sx={{ display: 'flex', flexDirection: 'row', pt: 2 }}>
                                <Button
                                    color="inherit"
                                    disabled={activeStep === 0}
                                    onClick={handleBack}
                                    sx={{ mr: 1 }}
                                >
                                    Back
                                </Button>
                                <Box sx={{ flex: '1 1 auto' }} />
                                {isStepOptional(activeStep) && (
                                    <Button color="inherit" onClick={handleSkip} sx={{ mr: 1 }}>
                                        Skip
                                    </Button>
                                )}

                                <Button onClick={handleNext}>
                                    {activeStep === steps.length - 1 ? 'Submit' : 'Next'}
                                </Button>
                            </Box>
                        </React.Fragment>
                    )}
                    <Typography variant="body2" align="center" sx={{ mt: 2 }}>
                        Already have an account? <a href="/login">Login</a>
                    </Typography>
                </div>
            </div>
        </Box>
    );
};

export default Register;
// File: frontend/src/pages/Review.jsx
import React, { useState, useEffect } from 'react';
import { useParams } from 'react-router-dom';
import { getConsultantById, createReview } from '../utils/api';
import { Star } from 'lucide-react';

const Review = () => {
  const { id } = useParams();
  const [consultant, setConsultant] = useState(null);
  const [rating, setRating] = useState(0);
  const [reviewText, setReviewText] = useState('');
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState('');
  const [successMessage, setSuccessMessage] = useState('');

  useEffect(() => {
    const fetchConsultant = async () => {
      setLoading(true);
      setError('');
      try {
        const data = await getConsultantById(id);
        setConsultant(data);
      } catch (err) {
        setError('Failed to retrieve consultant details. Please try again.');
        setConsultant(null);
        console.error('Failed to fetch consultant:', err);
      } finally {
        setLoading(false);
      }
    };

    fetchConsultant();
  }, [id]);

  const handleRatingChange = (newRating) => {
    setRating(newRating);
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    setLoading(true);
    setError('');
    setSuccessMessage('');

    try {
      const token = localStorage.getItem('token');
      if (!token) {
        setError('Authentication required. Please login.');
        return;
      }

      await createReview(token, id, rating, reviewText);
      setSuccessMessage('Review submitted successfully!');
      setRating(0);
      setReviewText('');
    } catch (err) {
      setError('Failed to submit review. Please try again.');
      console.error('Review submission failed:', err);
    } finally {
      setLoading(false);
    }
  };

  if (loading) {
    return <div className="text-center">Loading review page...</div>;
  }

  if (error) {
    return <div className="text-center text-red-500">{error}</div>;
  }

  if (!consultant) {
    return <div className="text-center">Consultant not found.</div>;
  }

  return (
    <div className="min-h-screen bg-gray-100 p-10">
      {/* Consultant Information */}
      <section className="max-w-4xl mx-auto bg-white rounded-2xl shadow-xl p-8 mb-8">
        <h2 className="text-3xl font-semibold text-gray-800 mb-2">
          Review for {consultant.specialty}
        </h2>
        <p className="text-xl text-gray-700">
          Specialty: {consultant.specialty}
        </p>
      </section>

      {/* Review Form */}
      <section className="max-w-4xl mx-auto bg-white rounded-2xl shadow-xl p-8">
        <form onSubmit={handleSubmit}>
          {/* Rating Stars */}
          <div className="mb-6">
            <label className="block text-gray-700 text-sm font-bold mb-2">
              Rating:
            </label>
            <div className="flex items-center">
              {[1, 2, 3, 4, 5].map((star) => (
                <button
                  key={star}
                  type="button"
                  className={`text-3xl ${star <= rating ? 'text-yellow-500' : 'text-gray-400'}`}
                  onClick={() => handleRatingChange(star)}
                >
                  <Star />
                </button>
              ))}
            </div>
          </div>

          {/* Review Text */}
          <div className="mb-6">
            <label htmlFor="reviewText" className="block text-gray-700 text-sm font-bold mb-2">
              Review:
            </label>
            <textarea
              id="reviewText"
              className="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"
              placeholder="Write your review..."
              value={reviewText}
              onChange={(e) => setReviewText(e.target.value)}
              rows="4"
            />
          </div>

          {/* Submit Button */}
          <button
            type="submit"
            className="bg-blue-500 hover:bg-blue-700 text-white font-bold py-3 px-8 rounded-full shadow-lg transition-colors duration-300"
          >
            Submit Review
          </button>
        </form>

        {successMessage && (
          <div className="mt-4 text-green-500">
            {successMessage}
          </div>
        )}
      </section>
    </div>
  );
};

export default Review;
// File: frontend/src/pages/TermsOfService.jsx
import React from 'react';

const TermsOfService = () => {
  return (
    <div className="min-h-screen bg-gray-100 p-10">
      {/* Terms of Service Text */}
      <section className="max-w-4xl mx-auto bg-white rounded-2xl shadow-xl p-8">
        <h2 className="text-3xl font-semibold text-gray-800 text-center mb-6">
          Terms of Service
        </h2>
        <p className="text-gray-700 leading-relaxed mb-4">
          Welcome to Health Consultant! These terms of service (&quot;Terms&quot;)
          govern your use of our website,{' '}
          <a href="/" className="text-blue-500 hover:underline">
            healthconsultant.com
          </a>
          , and related services. By accessing or using our services, you agree
          to be bound by these Terms.
        </p>

        <h3 className="text-2xl font-semibold text-gray-800 mb-4">
          1. Acceptance of Terms
        </h3>
        <p className="text-gray-700 leading-relaxed mb-4">
          By using our services, you agree to these Terms and our Privacy
          Policy. If you do not agree, please do not use our services.
        </p>

        <h3 className="text-2xl font-semibold text-gray-800 mb-4">
          2. Description of Service
        </h3>
        <p className="text-gray-700 leading-relaxed mb-4">
          Health Consultant provides a platform to connect users with healthcare
          professionals for consultations and health advice.
        </p>

        <h3 className="text-2xl font-semibold text-gray-800 mb-4">
          3. User Accounts
        </h3>
        <p className="text-gray-700 leading-relaxed mb-4">
          You may need to register for an account to access certain features.
          You are responsible for maintaining the confidentiality of your
          account and password.
        </p>

        <h3 className="text-2xl font-semibold text-gray-800 mb-4">
          4. User Conduct
        </h3>
        <p className="text-gray-700 leading-relaxed mb-4">
          You agree not to use our services for any unlawful purpose or in any
          way that could harm our services or other users.
        </p>

        <h3 className="text-2xl font-semibold text-gray-800 mb-4">
          5. Disclaimer
        </h3>
        <p className="text-gray-700 leading-relaxed mb-4">
          The information provided on Health Consultant is for informational
          purposes only and does not constitute medical advice. Always consult
          with a qualified healthcare professional for any health concerns.
        </p>

        <h3 className="text-2xl font-semibold text-gray-800 mb-4">
          6. Limitation of Liability
        </h3>
        <p className="text-gray-700 leading-relaxed mb-4">
          Health Consultant is not liable for any direct, indirect, incidental,
          or consequential damages resulting from your use of our services.
        </p>

        <h3 className="text-2xl font-semibold text-gray-800 mb-4">
          7. Changes to These Terms
        </h3>
        <p className="text-gray-700 leading-relaxed">
          We may update these Terms from time to time. We will notify you of
          any changes by posting the new Terms on this page.
        </p>
      </section>
    </div>
  );
};

export default TermsOfService;
// File: frontend/src/pages/UserProfile.jsx
import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import { getProfile, updateProfile } from '../utils/api';
import { User, Mail, Edit } from 'lucide-react';

const UserProfile = ({ setProfilePicture: setAppProfilePicture }) => {
  const [fullName, setFullName] = useState('');
  const [email, setEmail] = useState('');
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState('');
  const [isEditing, setIsEditing] = useState(false);
  const [isConsultant, setIsConsultant] = useState(false);
  const [bloodGroup, setBloodGroup] = useState('');
  const [medicalHistory, setMedicalHistory] = useState('');
  const [currentPrescriptions, setCurrentPrescriptions] = useState('');
  const [phone, setPhone] = useState('');
  const [areasOfExpertise, setAreasOfExpertise] = useState('');
  const [profilePicture, setProfilePicture] = useState('');
  const [newProfilePicture, setNewProfilePicture] = useState(null);
  const navigate = useNavigate();

  useEffect(() => {
    const fetchProfile = async () => {
      setLoading(true);
      setError('');
      try {
        const token = localStorage.getItem('token');
        if (!token) {
          setError('Authentication required. Please login.');
          return;
        }

        const data = await getProfile(token);
        setFullName(data.fullName);
        setEmail(data.email);
        setIsConsultant(data.isConsultant === 1);
        setBloodGroup(data.bloodGroup || '');
        setMedicalHistory(data.medicalHistory || '');
        setCurrentPrescriptions(data.currentPrescriptions || '');
        setPhone(data.phone || '');
        setEmail(data.email || '');
        setProfilePicture(data.profilePicture || '');
        setAppProfilePicture(data.profilePicture || '');

      } catch (err) {
        setError('Failed to retrieve profile. Please try again.');
        console.error('Failed to fetch profile:', err);
      } finally {
        setLoading(false);
      }
    };

    fetchProfile();
  }, [setAppProfilePicture]);

  const handleEditClick = () => {
    setIsEditing(true);
  };

  const handleCancelClick = () => {
    setIsEditing(false);
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    setLoading(true);
    setError('');

    try {
      const token = localStorage.getItem('token');
      if (!token) {
        setError('Authentication required. Please login.');
        return;
      }

      const formData = new FormData();
      formData.append('fullName', fullName);
      formData.append('email', email);

      if (!isConsultant) {
        formData.append('bloodGroup', bloodGroup);
        formData.append('medicalHistory', medicalHistory);
        formData.append('currentPrescriptions', currentPrescriptions);
      } else {
        formData.append('phone', phone);
      }

      if (newProfilePicture) {
        formData.append('profilePicture', newProfilePicture);
      }

      const updatedProfile = await updateProfile(formData);

      setProfilePicture(updatedProfile.profilePicture);
      setAppProfilePicture(updatedProfile.profilePicture)
      console.log('Profile updated successfully:', updatedProfile);
      setIsEditing(false);
    } catch (err) {
      setError('Failed to update profile. Please try again.');
      console.error('Profile update failed:', err);
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="min-h-screen bg-gray-100 p-10">
      <section className="max-w-4xl mx-auto bg-white rounded-2xl shadow-xl p-8">
        <h2 className="text-3xl font-semibold text-gray-800 text-center mb-6">
          User Profile
        </h2>

        {loading && <p className="text-center">Loading profile information...</p>}
        {error && <p className="text-center text-red-500">{error}</p>}

        {!loading && !error && (
          <div>
            {isEditing ? (
              <form onSubmit={handleSubmit}>
                <div className="mb-4">
                  <label htmlFor="fullName" className="block text-gray-700 text-sm font-bold mb-2">
                    Full Name
                  </label>
                  <input
                    type="text"
                    id="fullName"
                    className="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"
                    value={fullName}
                    onChange={(e) => setFullName(e.target.value)}
                  />
                </div>

                <div className="mb-6">
                  <label htmlFor="email" className="block text-gray-700 text-sm font-bold mb-2">
                    Email
                  </label>
                  <input
                    type="email"
                    id="email"
                    className="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"
                    value={email}
                    onChange={(e) => setEmail(e.target.value)}
                  />
                </div>
                 <div className="mb-4">
                  <label htmlFor="profilePicture" className="block text-gray-700 text-sm font-bold mb-2">
                    Change Profile Picture
                  </label>
                  <input
                    type="file"
                    id="profilePicture"
                    className="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"
                    onChange={(e) => setNewProfilePicture(e.target.files[0])}
                  />
                </div>
                {!isConsultant ? (
                  <>
                    <div className="mb-4">
                      <label htmlFor="bloodGroup" className="block text-gray-700 text-sm font-bold mb-2">
                        Blood Group
                      </label>
                      <input
                        type="text"
                        id="bloodGroup"
                        className="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"
                        value={bloodGroup}
                        onChange={(e) => setBloodGroup(e.target.value)}
                      />
                    </div>

                    <div className="mb-4">
                      <label htmlFor="medicalHistory" className="block text-gray-700 text-sm font-bold mb-2">
                        Medical History
                      </label>
                      <textarea
                        id="medicalHistory"
                        className="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"
                        value={medicalHistory}
                        onChange={(e) => setMedicalHistory(e.target.value)}
                        rows="3"
                      />
                    </div>

                    <div className="mb-4">
                      <label htmlFor="currentPrescriptions" className="block text-gray-700 text-sm font-bold mb-2">
                        Current Prescriptions
                      </label>
                      <textarea
                        id="currentPrescriptions"
                        className="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"
                        value={currentPrescriptions}
                        onChange={(e) => setCurrentPrescriptions(e.target.value)}
                        rows="3"
                      />
                    </div>
                  </>
                ) : (
                  <>
                    <div className="mb-4">
                      <label htmlFor="phone" className="block text-gray-700 text-sm font-bold mb-2">
                        Contact Information
                      </label>
                      <input
                        type="text"
                        id="phone"
                        className="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"
                        value={phone}
                        onChange={(e) => setPhone(e.target.value)}
                      />
                    </div>

                    <div className="mb-4">
                      <label htmlFor="areasOfExpertise" className="block text-gray-700 text-sm font-bold mb-2">
                        Areas of Expertise
                      </label>
                      <textarea
                        id="areasOfExpertise"
                        className="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"
                        value={areasOfExpertise}
                        onChange={(e) => setAreasOfExpertise(e.target.value)}
                        rows="3"
                      />
                    </div>
                  </>
                )}
                <div className="flex items-center justify-between">
                  <button
                    className="bg-blue-500 hover:bg-blue-700 text-white font-bold py-3 px-6 rounded-full focus:outline-none focus:shadow-outline"
                    type="submit"
                  >
                    Save Changes
                  </button>
                  <button
                    className="bg-gray-400 hover:bg-gray-500 text-gray-700 font-bold py-3 px-6 rounded-full focus:outline-none focus:shadow-outline"
                    type="button"
                    onClick={handleCancelClick}
                  >
                    Cancel
                  </button>
                </div>
              </form>
            ) : (
              <div>
                <div className="flex items-center justify-center mb-4">
                   <img
                      className="rounded-full w-32 h-32 mx-auto mb-4"
                      src={profilePicture || "https://placehold.co/128x128"}
                      alt="Profile Picture"
                  />
                </div>
                <div className="flex items-center mb-4">
                  <User className="h-6 w-6 mr-2 text-gray-500" />
                  <p className="text-gray-700 font-semibold">Full Name: {fullName}</p>
                </div>
                <div className="flex items-center mb-4">
                  <Mail className="h-6 w-6 mr-2 text-gray-500" />
                  <p className="text-gray-700 font-semibold">Email: {email}</p>
                </div>
                {!isConsultant ? (
                  <>
                    <div className="flex items-center mb-4">
                      <span className="h-6 w-6 mr-2 text-gray-500">B</span>
                      <p className="text-gray-700 font-semibold">Blood Group: {bloodGroup}</p>
                    </div>
                    <div className="flex items-center mb-4">
                      <span className="h-6 w-6 mr-2 text-gray-500">MH</span>
                      <p className="text-gray-700 font-semibold">Medical History: {medicalHistory}</p>
                    </div>
                    <div className="flex items-center mb-4">
                      <span className="h-6 w-6 mr-2 text-gray-500">CP</span>
                      <p className="text-gray-700 font-semibold">Current Prescriptions: {currentPrescriptions}</p>
                    </div>
                  </>
                ) : (
                  <>
                    <div className="flex items-center mb-4">
                      <span className="h-6 w-6 mr-2 text-gray-500">CI</span>
                      <p className="text-gray-700 font-semibold">Contact Information: {phone}</p>
                    </div>
                    <div className="flex items-center mb-4">
                      <span className="h-6 w-6 mr-2 text-gray-500">AE</span>
                      <p className="text-gray-700 font-semibold">Areas of Expertise: {areasOfExpertise}</p>
                    </div>
                  </>
                )}

                <button
                  className="bg-blue-500 hover:bg-blue-700 text-white font-bold py-3 px-6 rounded-full focus:outline-none focus:shadow-outline flex items-center"
                  type="button"
                  onClick={handleEditClick}
                >
                  <Edit className="h-5 w-5 mr-2" />
                  Edit Profile
                </button>
              </div>
            )}
          </div>
        )}
      </section>
    </div>
  );
};

export default UserProfile;
// File: frontend/src/utils/api.js
import axios from 'axios';

const BASE_URL = 'http://localhost:5555';

// Authentication Endpoints
export const loginUser = async (email, password) => {
    try {
        const response = await axios.post(`${BASE_URL}/api/login`, { email, password });
        return response.data;
    } catch (error) {
        console.error('Login failed:', error);
        throw error;
    }
};

export const registerUser = async (formData) => {
    try {
        const response = await axios.post(`${BASE_URL}/api/register`, formData, {
            headers: {
                'Content-Type': 'multipart/form-data', // Set content type for FormData
            },
        });
        return response.data;
    } catch (error) {
        console.error('Registration failed:', error);
        throw error;
    }
};

// Data Endpoints
export const getProfile = async (token) => {
    try {
        const response = await axios.get(`${BASE_URL}/api/profile`, {
            headers: { Authorization: `Bearer ${token}` },
        });
        return response.data;
    } catch (error) {
        console.error('Failed to retrieve profile:', error);
        throw error;
    }
};

export const updateProfile = async (formData) => {
  try {
    const token = localStorage.getItem('token');
    const response = await axios.put(`${BASE_URL}/api/profile`, formData, {
      headers: {
        Authorization: `Bearer ${token}`,
        'Content-Type': 'multipart/form-data',
      },
    });
    return response.data;
  } catch (error) {
    console.error('Failed to update profile:', error);
    throw error;
  }
};

export const getConsultantProfile = async (token) => {
    try {
        const response = await axios.request({
            method: 'GET',
            url: `${BASE_URL}/api/consultant/profile`,
            headers: { Authorization: `Bearer ${token}` },
        });
        return response.data;
    } catch (error) {
        console.error('Failed to retrieve consultant profile:', error);
        throw error;
    }
};


export const updateConsultantProfile = async (token, specialty, qualifications, availability) => {
    try {
        const response = await axios.put(`${BASE_URL}/api/consultant/profile`, { specialty, qualifications, availability }, {
            headers: { Authorization: `Bearer ${token}` },
        });
        return response.data;
    } catch (error) {
        console.error('Failed to update consultant profile:', error);
        throw error;
    }
};

export const getConsultants = async (specialty, rating, availability) => {
    try {
        const response = await axios.get(`${BASE_URL}/api/consultants`, {
            params: { specialty, rating, availability },
        });
        return response.data;
    } catch (error) {
        console.error('Failed to retrieve consultants:', error);
        throw error;
    }
};

export const getConsultantById = async (id) => {
    try {
        const response = await axios.get(`${BASE_URL}/api/consultants/${id}`);
        return response.data;
    } catch (error) {
        console.error('Failed to retrieve consultant:', error);
        throw error;
    }
};

export const getBookings = async (token) => {
    try {
        const response = await axios.get(`${BASE_URL}/api/bookings`, {
            headers: { Authorization: `Bearer ${token}` },
        });
        return response.data;
    } catch (error) {
        console.error('Failed to retrieve bookings:', error);
        throw error;
    }
};

export const createBooking = async (token, consultantId, date, time) => {
    try {
        const response = await axios.post(`${BASE_URL}/api/bookings`, { consultantId, date, time }, {
            headers: { Authorization: `Bearer ${token}` },
        });
        return response.data;
    } catch (error) {
        console.error('Failed to create booking:', error);
        throw error;
    }
};

export const getHealthRecords = async (token) => {
    try {
        const response = await axios.get(`${BASE_URL}/api/healthrecords`, {
            headers: { Authorization: `Bearer ${token}` },
        });
        return response.data;
    } catch (error) {
        console.error('Failed to retrieve health records:', error);
        throw error;
    }
};

export const createHealthRecord = async (token, medicalHistory, ongoingTreatments, prescriptions) => {
    try {
        const response = await axios.post(`${BASE_URL}/api/healthrecords`, { medicalHistory, ongoingTreatments, prescriptions }, {
            headers: { Authorization: `Bearer ${token}` },
        });
        return response.data;
    } catch (error) {
        console.error('Failed to create health record:', error);
        throw error;
    }
};

export const getMessages = async (token) => {
    try {
        const response = await axios.get(`${BASE_URL}/api/messages`, {
            headers: { Authorization: `Bearer ${token}` },
        });
        return response.data;
    } catch (error) {
        console.error('Failed to retrieve messages:', error);
        throw error;
    }
};

export const createMessage = async (token, consultantId, message) => {
    try {
        const response = await axios.post(`${BASE_URL}/api/messages`, { consultantId, message }, {
            headers: { Authorization: `Bearer ${token}` },
        });
        return response.data;
    } catch (error) {
        console.error('Failed to create message:', error);
        throw error;
    }
};

export const getPayments = async (token) => {
    try {
        const response = await axios.get(`${BASE_URL}/api/payments`, {
            headers: { Authorization: `Bearer ${token}` },
        });
        return response.data;
    } catch (error) {
        console.error('Failed to retrieve payments:', error);
        throw error;
    }
};

export const createReview = async (token, consultantId, rating, review) => {
    try {
        const response = await axios.post(`${BASE_URL}/api/reviews`, { consultantId, rating, review }, {
            headers: { Authorization: `Bearer ${token}` },
        });
        return response.data;
    } catch (error) {
        console.error('Failed to create review:', error);
        throw error;
    }
};

// Admin Endpoints
export const getAdminUsers = async (token) => {
    try {
        const response = await axios.get(`${BASE_URL}/api/admin/users`, {
            headers: { Authorization: `Bearer ${token}` },
        });
        return response.data;
    } catch (error) {
        console.error('Failed to retrieve users:', error);
        throw error;
    }
};

export const getAdminConsultants = async (token) => {
    try {
        const response = await axios.get(`${BASE_URL}/api/admin/consultants`, {
            headers: { Authorization: `Bearer ${token}` },
        });
        return response.data;
    } catch (error) {
        console.error('Failed to retrieve consultants:', error);
        throw error;
    }
};

export const getAdminBookings = async (token) => {
    try {
        const response = await axios.get(`${BASE_URL}/api/admin/bookings`, {
            headers: { Authorization: `Bearer ${token}` },
        });
        return response.data;
    } catch (error) {
        console.error('Failed to retrieve bookings:', error);
        throw error;
    }
};

export const submitContactForm = async (name, email, subject, message) => {
    try {
        const response = await axios.post(`${BASE_URL}/api/contact`, { name, email, subject, message });
        return response.data;
    } catch (error) {
        console.error('Failed to submit contact form:', error);
        throw error;
    }
};

export const acceptBooking = async (token, bookingId) => {
    try {
        const response = await axios.put(`${BASE_URL}/api/bookings/${bookingId}/accept`, {}, {
            headers: {
                Authorization: `Bearer ${token}`
            }
        });
        return response.data;
    } catch (error) {
        console.error('Failed to accept booking:', error);
        throw error;
    }
};

export const rejectBooking = async (token, bookingId) => {
    try {
        const response = await axios.put(`${BASE_URL}/api/bookings/${bookingId}/reject`, {}, {
            headers: {
                Authorization: `Bearer ${token}`
            }
        });
        return response.data;
    } catch (error) {
        console.error('Failed to accept booking:', error);
        throw error;
    }
};

export const cancelBooking = async (token, bookingId) => {
    try {
        const response = await axios.put(`${BASE_URL}/api/bookings/${bookingId}/cancel`, {}, {
            headers: {
                Authorization: `Bearer ${token}`
            }
        });
        return response.data;
    } catch (error) {
        console.error('Failed to accept booking:', error);
        throw error;
    }
};

export const getConsultantBookings = async (token) => {
     try {
        const response = await axios.get(`${BASE_URL}/api/consultant/bookings`, {
            headers: {
                Authorization: `Bearer ${token}`
            }
        });
        return response.data;
    } catch (error) {
        console.error('Failed to retrieve consultant bookings:', error);
        throw error;
    }
};

export const get_details = async (token, bookingId) => {
    try {
       const response = await axios.get(`${BASE_URL}/api/getDetails/${bookingId}`, {
           headers: {
               Authorization: `Bearer ${token}`
           }
       });
       return response.data;
    } catch (error) {
       console.error('Failed to retrieve consultant bookings:', error);
       throw error;
    }

}

// Route to get all bookings for a specific consultant ID
export const getConsultantBookingsById = async (token, consultantId) => {
     try {
        const response = await axios.get(`${BASE_URL}/api/consultants/${consultantId}/bookings`, {
            headers: {
                Authorization: `Bearer ${token}`
            }
        });
        return response.data;
    } catch (error) {
        console.error('Failed to retrieve consultant bookings by ID:', error);
        throw error;
    }
};
export const approveConsultant = async (token, userId) => {
    try {
        const response = await axios.put(`${BASE_URL}/api/admin/consultants/${userId}/approve`, {}, {
            headers: {
                Authorization: `Bearer ${token}`
            }
        });
        return response.data;
    } catch (error) {
        console.error('Failed to approve consultant:', error);
        throw error;
    }
};
// File: frontend/vite.config.js
import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'
import tailwindcss from '@tailwindcss/vite'

// https://vite.dev/config/
export default defineConfig({
  plugins: [react(), tailwindcss()],
})
